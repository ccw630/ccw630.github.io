<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces - April Fools Day Contest 2021</title>
      <link href="/Codeforces-April-Fools-Day-Contest-2021/"/>
      <url>/Codeforces-April-Fools-Day-Contest-2021/</url>
      
        <content type="html"><![CDATA[<p>一年只有两场 cf，一场 Goodbye，一场 April Fools Day Contest。</p><p>本场总结: Solved 6/9, Ranked 35/6652。题目质量还过得去，不过这次 kit1980 似乎又摸了，梗有点缺乏新意[1]，甚至有些向 ctf 靠拢[2]。另外由于逐渐社会，所以全场都用 Python 3 过的题。</p><blockquote><p>[1] April Fools Day 全系列最好的梗，现在想来非 kanban 莫属了</p><p>[2] 所以我当初是不是应该去打 ctf 更好啊（但你做出这场的 ctf 题了吗）</p></blockquote><h2 id="A-Is-it-rated-2"><a href="#A-Is-it-rated-2" class="headerlink" title="A. Is it rated - 2"></a>A. Is it rated - 2</h2><p>Solved. 00:00 (+)</p><p><a href="https://codeforces.com/contest/1505/problem/A" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>No. 去年出过了，今年不会再上当了！比去年多了个多组输入而已。</p><p>后面看了一下，我是第六个通过的提交。反应还不够快？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input()</span><br><span class="line">        print(<span class="string">"NO"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="B-DMCA"><a href="#B-DMCA" class="headerlink" title="B. DMCA"></a>B. DMCA</h2><p>Solved. 00:48 (+4)</p><p><a href="https://codeforces.com/contest/1505/problem/B" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>本以为谜底会在题目上，没想到在题面里。</p><blockquote><p>In this problem you need to find a root of a number according to this new DMCA law.</p></blockquote><p>实际上跟什么 DMCA 没有啥关系，所谓的<em>root</em>不是指平方根而是指<em>数根</em>。由于样例过于具有迷惑性，所以交了几次无果以后先跳过去了。</p><p>当时其实想到了数根这点，但最终忘了具体的定义，写了个求各位数之和没过，也没注意到比平方根多过了一个点。</p><p>至于做法，众所周知，数根其实是有规律的，直接模9就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">print((n<span class="number">-1</span>)%<span class="number">9</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="C-Fibonacci-Words"><a href="#C-Fibonacci-Words" class="headerlink" title="C. Fibonacci Words"></a>C. Fibonacci Words</h2><p>Solved. 00:21 (+)</p><p><a href="https://codeforces.com/contest/1505/problem/C" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>斐波那契嘛，就是 F(n)=F(n-1)+F(n-2) 咯。输入全是字母，所以先转成数字序，然后找找模26下的规律就是了。</p><p>反正规律是看到了，但 +1 -1 模啥的并没有很明确，随便写了一下，样例过了，皆大欢喜！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s=input()</span><br><span class="line">f=<span class="keyword">lambda</span> x:ord(x)<span class="number">-64</span></span><br><span class="line">flag=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,len(s)):</span><br><span class="line">    x = f(s[i<span class="number">-1</span>])+f(s[i<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">while</span> x&gt;<span class="number">26</span>:x-=<span class="number">26</span></span><br><span class="line">    <span class="keyword">if</span> x<span class="number">-1</span>!=f(s[i]):</span><br><span class="line">        flag=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'YES'</span><span class="keyword">if</span> flag <span class="keyword">else</span> <span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure><h2 id="D-Xenolith-Hippodrome"><a href="#D-Xenolith-Hippodrome" class="headerlink" title="D. Xenolith? Hippodrome?"></a>D. Xenolith? Hippodrome?</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1505/problem/D" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>? 死于词汇量(读题量)</p><p>据说是答案在题面上，判断是否是<em>Xenodrome</em>。</p><p>场上 Google 了 Xenolith, Hippodrome, Xenodrome, Hippolith，然而并没看出来哪个词是具有含义的。实际上查 Xenodrome 都是无关信息，更应该去 oeis 查询。</p><h2 id="E-Cakewalk"><a href="#E-Cakewalk" class="headerlink" title="E. Cakewalk"></a>E. Cakewalk</h2><p>Solved. 01:04 (+)</p><p><a href="https://codeforces.com/contest/1505/problem/E" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>拍脑袋贪心，每次找最近的星号。远近使用曼哈顿距离来定义，如果距离相同在上排的优先（自然的遍历顺序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n,m=map(int,input().split())</span><br><span class="line">a=[input()<span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">if</span> a[i][j]==<span class="string">'*'</span>:</span><br><span class="line">            l+=[(i,j)]</span><br><span class="line">now=(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">ans=int(now <span class="keyword">in</span> l)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    mn=<span class="number">99</span></span><br><span class="line">    mnt=now</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> i!=now <span class="keyword">and</span> i[<span class="number">0</span>]&gt;=now[<span class="number">0</span>] <span class="keyword">and</span> i[<span class="number">1</span>]&gt;=now[<span class="number">1</span>] <span class="keyword">and</span> mn&gt;sum(i)-sum(now):</span><br><span class="line">            mn=sum(i)-sum(now)</span><br><span class="line">            mnt=i</span><br><span class="line">    <span class="keyword">if</span> mn==<span class="number">99</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    now=mnt</span><br><span class="line">    ans+=<span class="number">1</span></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="F-Math"><a href="#F-Math" class="headerlink" title="F. Math"></a>F. Math</h2><p>Solved. 01:18 (+)</p><p><a href="https://codeforces.com/contest/1505/problem/F" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>比较明显的盲文，不过找翻译花了一些时间。根据题面，不同的盲文规范还不大一样。</p><p>不过中间一模一样的两个图形(底下两个点，上下各两个点)代表的是<code>-x</code>。前后估计是2，所以猜是<code>2-x2</code>。<code>x2</code>中间的符号不大一样，根据样例猜可能是上标。然后过了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">print(<span class="number">2</span>-n**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="G-Encoded-message"><a href="#G-Encoded-message" class="headerlink" title="G. Encoded message"></a>G. Encoded message</h2><p>Solved. 01:56 (+)</p><p><a href="https://codeforces.com/contest/1505/problem/G" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>又是盲文！这场应该改名叫 Blind People Contest</p><p>前期找了很多时间的规律，总感觉这个规律有点若即若离。实际上前面3个0-2和后面2个0-3，和还相等，其实就是对应 2×3 的盲文阵列。</p><p>于是对着前一题找的图手打了一个表。样例还很贴心地把所有编码可能重复的字母放在里面，以防混淆(codeforcez 也太刻意了吧)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">'10010'</span>,<span class="string">'11020'</span>,<span class="string">'20011'</span>,<span class="string">'21012'</span>,<span class="string">'11011'</span>,<span class="string">'21021'</span>,<span class="string">'22022'</span>,<span class="string">'12021'</span>,<span class="string">'00000'</span>,<span class="string">'12012'</span>,<span class="string">'10120'</span>,<span class="string">'11130'</span>,<span class="string">'20121'</span>,<span class="string">'21122'</span>,<span class="string">'11121'</span>,<span class="string">'21131'</span>,<span class="string">'22132'</span>,<span class="string">'12131'</span>,<span class="string">'11111'</span>,<span class="string">'12122'</span>,<span class="string">'10221'</span>,<span class="string">'11231'</span>,<span class="string">'12113'</span>,<span class="string">'20222'</span>,<span class="string">'21223'</span>,<span class="string">'11222'</span>]</span><br><span class="line">n=int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    s=input().replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">    print(chr(<span class="number">97</span>+a.index(s)),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="H-L-BREAK-into-program"><a href="#H-L-BREAK-into-program" class="headerlink" title="H. L BREAK into program"></a>H. L BREAK into program</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1505/problem/H" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>没做。没工具，IDA* 还是什么十六进制阅读器，都没有，更不用说是题解提到的<em>ZX Spectrum emulator</em>了</p><p>据说通过阅读器可以看出端倪，有一个长得像注释的东西提出有个加号写成减号了，另外有两个数组，对应相加取 ascii 码应该就是答案了。</p><p>不过我用 vscode 试了下，没显示内容，就放弃了。</p><p>只需要输出答案，这题很 ctf。如果提早准备对应的工具，应该是能做出来的。</p><h2 id="I-Mysterious-language-again-seriously"><a href="#I-Mysterious-language-again-seriously" class="headerlink" title="I. Mysterious language again, seriously?"></a>I. Mysterious language again, seriously?</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1505/problem/I" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>去年也有一个语言学习题，不过这种都挺花时间的。不过这次没有告诉是什么语言，而是让凭空猜。</p><p>结果 seriously 居然是一个语言！场上我还以为要用 custom test 来 hack 出到底是什么语言。。摔，而且 custom test 老是卡住</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> April Fools Day </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并非 Python Decorator 的坑 - 成员方法</title>
      <link href="/idiot-on-python/"/>
      <url>/idiot-on-python/</url>
      
        <content type="html"><![CDATA[<p>我是 sb！Python 都不会写！（大声）</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在一个奇怪的场景里触发了一个奇怪的问题。为了降低某个方法的 qps(?)，写了一个摸鱼 decorator，使得该方法每 n 次调用只运行一次，其他时候返回上一次运行的结果。大概用法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@do_every(time=3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    ....    <span class="comment"># 当然，得是无副作用的</span></span><br><span class="line">    <span class="keyword">return</span> ...</span><br></pre></td></tr></table></figure><p>这个 decorator 也不难写，只是需要维护一个计数器和上一次的结果，也就是说是一个<em>有状态</em>的 decorator（不保证这么说是否合理，可以意会一下）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_every</span><span class="params">(time)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        counter = <span class="number">-1</span></span><br><span class="line">        last_res = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> counter, last_res</span><br><span class="line">            counter = (counter + <span class="number">1</span>) % time</span><br><span class="line">            <span class="keyword">if</span> counter:</span><br><span class="line">                <span class="keyword">return</span> last_res</span><br><span class="line">            last_res = func(*args, **kw)</span><br><span class="line">            <span class="keyword">return</span> last_res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>因为其行为和摸鱼类似，因此命名为「摸鱼 decorator」</p><h2 id="翻车"><a href="#翻车" class="headerlink" title="翻车"></a>翻车</h2><p>上面的代码看着写的很对（实际上也写的很对）</p><p>但实际上，遇到 class 后，可能产生和预期有出入的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @do_every(time = 3)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> random.random()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了<code>class A</code>，并给了一个成员方法<code>func</code>。那么，在使用<code>do_every</code>前，先思考一个问题</p><blockquote><p>若存在两个<code>A</code>的实例，那他们应该<em>各自摸鱼</em>还是<em>轮流摸鱼</em>？</p></blockquote><p>事实上，由于没有思考过这个问题，因此直接导致了翻车。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = A()</span><br><span class="line">b = A()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(<span class="string">'a'</span>, a.func())</span><br><span class="line">    print(<span class="string">'b'</span>, b.func())</span><br><span class="line"><span class="comment"># 输出啥?</span></span><br></pre></td></tr></table></figure><p>摸鱼 decorator 最终起的作用是<em>轮流摸鱼</em>，参考如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a 0.06733737591002142</span><br><span class="line">b 0.06733737591002142</span><br><span class="line">a 0.06733737591002142</span><br><span class="line">b 0.6798565770897768</span><br><span class="line">a 0.6798565770897768</span><br><span class="line">b 0.6798565770897768</span><br><span class="line">a 0.6623001317870929</span><br><span class="line">b 0.6623001317870929</span><br></pre></td></tr></table></figure><p>我们看到 4 轮中，a 干了两轮活，b 干了一轮活，加起来总共干了三次。实际上在使用上我们希望他们<em>各自摸鱼</em>，也就是 a 和 b 各需要干两轮活，总共加起来要干四次。资本家对此表达了强烈不满！</p><p>在实践中，我们发现 decorator 内部的变量，虽然在不同调用该 decorator 的函数间不共享(显然 decorator 的入参不同)，但在 Python 中的成员方法，实际上应看做同一个函数(传入的 self 不同)</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>再也不写有状态的 decorator 了！</p><p>由于没有想到好的修复方法，于是放弃了摸鱼(?)，用别的办法绕过了这个问题。</p><p>有想到办法的牛逼网友，欢迎供稿。</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Asyncio 的坑 - Cancelled Error</title>
      <link href="/python-asyncio-cancelled-error/"/>
      <url>/python-asyncio-cancelled-error/</url>
      
        <content type="html"><![CDATA[<p>(第二次?)遇到了 Python 里的坑，特此记录。</p><p>背景是一个 Tornado 和 Asyncio 协程混用的项目，将一部分逻辑迁移到 Asyncio 后，之前好用的<code>asyncio.wait_for</code>突然偶尔失灵，导致里面调的协程进了死循环。当时发现的时候只是简单地看了一下，认为是 asyncio 的问题(经典臭名昭著?)，但没关注具体是什么问题，只是先把里面的死循环改活了。上了线后出了些别的问题，觉得这里还是不妥，于是更进一步挖掘了下这个坑的具体成因。</p><p>话先说在前面，Python 3.8 已经修复(?)了该问题，而我这里刚好用的是 3.7。权当记录一下时代的眼泪好了。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>先 demo 一下现场，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">'processing'</span>)</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(f(), timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        print(<span class="string">'timeout'</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>且先不读 Python docs，这里<code>asyncio.wait_for</code>预期的行为就是<code>f</code>运行超过1秒就停止，之后打印<code>&quot;timeout&quot;</code>。然而运行的结果却是，程序一直在打印<code>&quot;processing&quot;</code>而不打印<code>&quot;timeout&quot;</code>，当然也不退出。由于这里没有任何的其他逻辑，所以可以先给<code>asyncio</code>颁一个石锤~</p><p>而个中奥妙其实在<code>f</code>里的这个<code>try-except</code>里。如果我们去掉这个，然后再运行，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'processing'</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(f(), timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        print(<span class="string">'timeout'</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>那么程序就是一切正常的了。</p><p>虽然这么搞有点上帝视角，但是到了这步我们只能顺理成章地把罪魁祸首揪出来，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">'processing'</span>)</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(type(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(f(), timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        print(<span class="string">'timeout'</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>这样一运行，我们就看到了它：<code>asyncio.CancelledError</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">processing</span><br><span class="line">&lt;class &#39;concurrent.futures._base.CancelledError&#39;&gt;</span><br><span class="line">processing</span><br><span class="line">processing</span><br><span class="line">processing</span><br><span class="line">processing</span><br><span class="line">processing</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="检讨"><a href="#检讨" class="headerlink" title="检讨"></a>检讨</h2><p>按上面的流程走，这其实是一个很初级的问题。不过为什么花了精力排查呢？</p><p>首先是「偶尔失灵」，也就是并非必然复现。为什么呢，其实也很简单了，只有是在<code>try-except</code>里遇到了取消，才会出现这个问题，而实际上并不是整段协程的执行都被<code>try-except</code>包裹。</p><p>在实际的代码里，<code>try-except</code>是在里面好几层的，不过捕获的确实是<code>Exception</code>，而且打日志的时候其实也没有把详细的错误打出来。</p><p>这个事情告诉我们，一方面抓异常要抓的精细一点，另一方面日志尽量不要把异常吞下去。</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>起手不如先看个<a href="https://docs.python.org/3/library/asyncio-task.html#timeouts" target="_blank" rel="noopener external nofollow noreferrer">文档</a>，其实<code>timeout</code>的实现就是到点了做一个<code>cancellation</code>。其中有对<code>cancel</code>的<a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel" target="_blank" rel="noopener external nofollow noreferrer">说明</a>，最初是这个给了我排查问题的启发。当然现在来看，这个文档就足够解释一切了。</p><p>再进一步，<code>cancel</code>的说明里其实给了<code>CancelledError</code>的<a href="https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError" target="_blank" rel="noopener external nofollow noreferrer">跳转入口</a>，其中「Changed in version 3.8: CancelledError is now a subclass of BaseException.」正好解释了为什么我一开始说 Python 3.8 已经修复了该问题。</p><p>还是回到<code>cancel</code>的说明上来。看这段话</p><blockquote><p>This arranges for a CancelledError exception to be thrown into the wrapped coroutine on the next cycle of the event loop.</p><p>The coroutine then has a chance to clean up or even deny the request by suppressing the exception with a try … … except CancelledError … finally block. Therefore, unlike Future.cancel(), Task.cancel() does not guarantee that the Task will be cancelled, although suppressing cancellation completely is not common and is actively discouraged.</p></blockquote><p>这段实际上告诉了我们<code>CancelledError</code>是一个可被捕获的异常。那么在 Python 3.8 之前，<code>CancelledError</code>继承自<code>Exception</code>，因此我们捕获<code>Exception</code>就带来了悲剧。Python 3.8 以后改继承自<code>BaseException</code>，我们就可以在这个 case 里安心使用<code>except Exception</code>了。而说明后给的示例代码，则是显示地捕获了<code>CancelledError</code>，并再<code>raise</code>出去，使得整个异常链路可控。</p><hr><p>至于最后的解决办法，似乎不需要赘述了(当然不是升级 Python 版本了！)</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ccw 的 Shell CookBook(1) - Watchdog</title>
      <link href="/bash-cookbook/"/>
      <url>/bash-cookbook/</url>
      
        <content type="html"><![CDATA[<p>ccw 的 Shell CookBook 系列第一篇，本系列主要是记录 ccw 的一些 shell 使用 case，并非各种命令的教学。</p><p>本篇为大家带来一条 Watchdog，主要功能是定时监控系统运行是否正常，其本体是一段 Bash Script。另外 Watchdog 这个词是一念之间造出来的(也可能是潜意识的记忆，但不知道出处了)，因为它有问题就会叫(报警)，以看门狗来形容还算贴切。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时代在前进，工具在进步，这年头能熟练使用 Shell 的人，我感觉大概不多了。我也不熟，所以需要用文字记录来确保将来想起来的时候能找到。</p><p>就我来说，有一些场景我是不会用 Shell 的，尤其是处理字符串，比如处理 JSON 我会直接上 JavaScript(这很合理，它能直接读 JSON)，统计去重后条数我会用原生支持 set 的语言临时整个然后取长度(这很经典，但我确实不能保证能打对<code>sort</code>和<code>uniq</code>的各种参数组合，也因此被人吐槽过)，还有根据规则做替换(sed 和 awk 啥的很有名，但是确实不是首选。关于 sed，主体的语法在 vim 里大概会用，然而在外面带上参数就不熟了；如果字符串或文件不算大，直接贴到 VSCode 里操作更快)</p><p>以我目前的认识，Shell 的精髓在于组合各种程序，是比 Python 更胶水的胶水；此外，操作文件也非常地方便快捷。如果这两个痛点都中(即你需要用各种程序来处理文件?)，使用 Shell 来解决问题是当仁不让的。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某内网环境，不希望投入部署成本搞一套监控系统，需要搞一个土制的。同时监控的要求也不算高，能捕捉到小时级的状态异常就可以接受。</p><p>有限开放对公网的访问，得通过一个 http 代理。可以通过跳板机访问该环境。</p><p>被监控系统部署在 Kubernetes 上。跳板机可以操作其集群，当然是通过<code>kubectl</code>。</p><p>系统确定不再更新，因此也不存在内嵌逻辑来做报警的可能。</p><p>有 hdfs，可以在系统内使用命令来读写，但在跳板机上不行。</p><p>经过在系统上进行一定的配置后，可以每小时在 check 某个条件通过后，向 hdfs 中的某个文件追加内容，具体是上个小时的时间戳和实际执行时间的时间戳。可以认为如果该小时这个 hdfs 内的文件被追加了正确的内容，那么系统端到端都是正常的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>铺垫已经铺好了，其实就是需要在外部定时检测那个被写的 hdfs 文件。定时执行我们选择信任<code>crontab</code>，它可以帮我们定时拉起一个程序或脚本。于是问题就变成了这个脚本怎么写。</p><p>我们选择在每个小时的55分拉起脚本来做检测，如果检测不通过就往外部的通讯工具发消息。这里为什么是55分，因为系统追加 hdfs 文件内容的行为并非是每个小时准点做的，会等待某个条件达成后才开始。我们可以接受这个条件的达成时间比小时准点晚一会，当然不会晚太多；到了这个小时快要结束的时候，一定是达成了的。</p><p>往外部的通讯工具发消息，是通过一个在公网的 api 接口，因此这里会用<code>curl</code>并通过代理去请求。这个是在脚本开发前先要验证通过的。</p><p>而具体的检测逻辑，一方面是算出当前所处小时上一小时的时间戳。<code>date</code>有相关参数可以完成。另一方面是需要去获取 hdfs 文件内容的末尾，拿到系统打印的那个时间戳。在该环境下，需要<code>kubectl</code>和<code>hdfs</code>命令结合来做。之后两个比较，如果不一致，就该报警了。比如这个小时系统没有把前一小时的时间戳正常写 hdfs，最后一条就会是前两个小时的时间戳，这就产生了不一致。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>首先先把最基本的单元搞起，比如先把 crontab 配好。为了方便观察，这边还打了日志。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">55 * * * * sudo /root/watchdog.sh &gt;&gt; /root/watchlog 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>然后是通过代理请求公网的<code>curl</code>命令。这个代理使用了用户名和密码来做认证。具体参数请参考 <a href="https://curl.se/docs/manpage.html" target="_blank" rel="noopener external nofollow noreferrer">cURL man page</a>。不过主要部分都是从 Postman 拷的就是了，只加了下 proxy 相关的参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x http://proxy:1234 --proxy-user usr:<span class="built_in">pwd</span> --location --request POST <span class="string">'https://api/'</span> --header <span class="string">'Content-Type: application/json'</span> --data-raw <span class="string">'&#123;"text": "汪汪汪"&#125;'</span></span><br></pre></td></tr></table></figure><p>使用<code>date</code>算出当前所在小时的时间戳。有点绕 but it works，大概的意思是先拼出上一个0点，之后再换成时间戳。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -d <span class="string">"<span class="variable">$(date "+%Y-%m-%d %H:00:00" -d last-hour)</span>"</span> +%s</span><br></pre></td></tr></table></figure><p>使用<code>kubectl</code>通过系统的 pod 去访问<code>hdfs</code>，这里需要分三步：</p><ul><li>从 K8s 集群里捞出目标系统的 pod<ul><li>先列出所有的 pod，但是需要筛掉额外的信息</li><li><code>kubectl get pod | grep target-system | head -n 1 | awk &#39;{print $1}&#39;</code></li></ul></li><li>在该容器上执行<code>hdfs</code>命令，并把结果拉回<ul><li>直接在跳板机上输出，而不是在 pod 里外拷来拷去</li><li>需要用<code>--</code>使<code>kubectl</code>意识到后面的参数都要带到 pod 里面去</li><li><code>kubectl exec pod-xxxxx -- hdfs dfs -tail /user/me/checktime</code></li></ul></li><li>拉回来的结果处理一下<ul><li>拿最后一行的第一列</li><li><code>kubectl blabla | tail -n 1 | awk &#39;{print $1}&#39;</code></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> `kubectl get pod | grep target-system | head -n 1 | awk <span class="string">'&#123;print $1&#125;'</span>` -- hdfs dfs -tail /user/me/checktime | tail -n 1 | awk <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h2><p>关键代码都在上面了，最后当然是要把逻辑和过程套上了。</p><p>话说每次写 Bash 都要查一下 if 咋写，这个也得反省一下 TvT。</p><p>冷知识(?): <code>[ xxx ]</code>是<code>test xxx</code>命令的语法糖(这样就能理解为什么中括号前后得有空格了)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">lasthour=$(date -d <span class="string">"<span class="variable">$(date "+%Y-%m-%d %H:00:00" -d last-hour)</span>"</span> +%s)</span><br><span class="line">tasktime=$(kubectl <span class="built_in">exec</span> `kubectl get pod | grep target-system | head -n 1 | awk <span class="string">'&#123;print $1&#125;'</span>` -- hdfs dfs -tail /user/me/checktime | tail -n 1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$lasthour</span> <span class="variable">$tasktime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$lasthour</span> == <span class="variable">$tasktime</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"gg"</span></span><br><span class="line">    curl -x http://proxy:1234 --proxy-user usr:<span class="built_in">pwd</span> --location --request POST <span class="string">'https://api/'</span> --header <span class="string">'Content-Type: application/json'</span> --data-raw <span class="string">'&#123;"text": "汪汪汪"&#125;'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样就完成了一个土制的<del>监控系统</del> watchdog。</p>]]></content>
      
      
      <categories>
          
          <category> ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make a bomb</title>
      <link href="/make-a-bomb/"/>
      <url>/make-a-bomb/</url>
      
        <content type="html"><![CDATA[<p>战术性电池鼓包，不用慌。</p><p>连载中，后续待更新。</p><h2 id="How-to-make-a-bomb"><a href="#How-to-make-a-bomb" class="headerlink" title="How to make a bomb"></a>How to make a bomb</h2><blockquote><p>How to make a bomb?</p><p>最佳回答: 我不知道。</p></blockquote><p>公司电脑(MacBook Pro 15-inch, 2018)，重度使用不到两年。这下半年的常态是开一个 Chrome、两个 Terminal、四个 VSCode 和一个 IntelliJ IDEA，其中一个 VSCode 还是连的 Remote SSH。长时间开机，并连接两个显示器，其中一个 2K(Dell P2719H)，一个 4K(Dell U2720Q)，使用显示器 Type-C 接口供电。</p><p>之前是直接把键盘压在电脑本体的键盘正上方，得益于 HHKB 特意设计的脚垫(有吗?)，使用上没有任何问题。后来发现直接放偶尔会压到空格键 or 退格键，于是稍微移动到下面一点，盖住一点触控板，使其不会误触退格键和空格键。直到双十一入了一个亚克力垫板，那个时候键盘已经完全没法直接对着键盘压上去了，只能把键盘放在触控板上，然后使用鼠标。HHKB 的官方垫板其实没什么用，不推荐：垫板的脚垫跟键盘本身的脚垫差不多高；幸好老板给的量够多，于是垫了两层将就使用。一开始垫板在键盘正上方，过了几天还是得往下放几厘米才不会误触空格。这个时候和周围人的电脑比对，发现自己的已经变得很肥了(雾)。大体的对比感受总结就是「为什么你的 Mac 这么薄？！」</p><p>于是计划着，该备份了，不然哪一天就真炸了。然而一直没有真的把这个计划落地，之后有一天去会议室，然后动了下转轴，结果咯嘣一声，电脑裂了。。于是就有了全新双向开屏笔记本电脑(大雾)</p><h2 id="Migrate-the-bomb"><a href="#Migrate-the-bomb" class="headerlink" title="Migrate the bomb"></a>Migrate the bomb</h2><p>趁着电脑还能开，跑去 IT 先换一台再说，至少数据可以保证。对于这颗炸弹，IT 也表示不敢再接电源了，怕炸。不过 IT 不愧是 IT，掏出另一台 Mac 和一根 C to C 的高速线就开始干迁移助理，一小时不到完成了。不过临时给换的电脑，虽然是同型号同配置，但貌似电池也有点问题，这个是后话了。</p><p>迁移几乎是无缝的，后续我只干了四件事：想新密码；换桌面；修改 host name；重新登录 Chrome 上的 Google 账号。前两件事其实本质是我司 IT 作祟，一个是限制了密码的复杂度，以及把 Catalina 的默认桌面图片文件偷偷换成了注意信息安全的标语图片。host name 不改也行，主要是看着不顺眼以及怕以后想改不方便。Chrome 为啥重新登录不确定，可能是之前掉线了。</p><h2 id="Bomb-time-machine"><a href="#Bomb-time-machine" class="headerlink" title="Bomb time machine"></a>Bomb time machine</h2><p>于是回到裂开前，其实早就计划着搞一个 <a href="https://support.apple.com/en-us/HT201250" target="_blank" rel="noopener external nofollow noreferrer">Time Machine</a>，有备无患。然而在没有准备好的情况下就裂了。</p><p>所以拿到迁移后的临时电脑，第一件事就是想办法把 Time Machine 办了。当时已经基本想好了，手上没有空闲的移动硬盘，所以不行就用远程的硬盘。远程硬盘哪里有呢，那就是公司的 DevBox 了(反正也是备份公司电脑)。起手一看，居然只剩 120G，然后再一看，日志居然有 80G。对比着 180G 的预估值，粗略地清理了下，预留了 200G 以上的空间。</p><p>不过如何让 Time Machine 支持备份到远程硬盘，也需要稍微动下脑筋。首先本地 Mac 和远程 DevBox 得有个共享的存储，或者说文件夹。这里就简单用 smb 来共享，之后在上面整一个虚拟硬盘挂进来就可以给 Time Machine 用了(大概)。</p><p>所谓的 DevBox，本质就是个云主机(比如阿里云 ECS / AWS EC2)，<strong>不过不建议在公网上这么搞</strong>。先在 DevBox 上配好 samba service。具体配置直接参考<code>/etc/samba/smb.conf</code>里的，并在后面追加一个就行了。权限参考该文件前面的注释，给 0755 即可，主要注意用户需要是个系统里的用户，同时配的路径该用户有权限，否则可能起不起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[xxx]</span><br><span class="line">    path &#x3D; &#x2F;path&#x2F;to&#x2F;somewhere</span><br><span class="line">    valid users &#x3D; username</span><br><span class="line">    browseable &#x3D; yes</span><br><span class="line">    writeable &#x3D; yes</span><br><span class="line">    create mask &#x3D; 0755</span><br><span class="line">    directory mask &#x3D; 0755</span><br></pre></td></tr></table></figure><p>之后启动一下 samba，注意 check status。用<code>sudo smbpasswd -a username</code>设定密码添加好对应的 smb 用户。</p><p>配置完 Samba，在 Mac 上通过 Finder，前往 &gt; 连接服务器，输入 DevBox 的地址，以及对应用户和密码，就可以看到对应的文件夹了。之后因为 Time Machine 需要的是一个磁盘来做备份，所以可以用磁盘工具，文件 &gt; 新建映像 &gt; 空白映像，选择 smb 的那个目录，新建一个 200 G 的磁盘映像(<code>.dmg</code>文件)，完事以后双击挂载，就可以在 Time Machine 备份时选择这个 DevBox 上的磁盘了。</p><p>不过这个速度真的慢，2020 年开始备份，2021 年还没完。- -||</p><p>UPD: 不建议参考，电脑都换回去了，没备份完成过。</p><h2 id="After-fix-the-bomb"><a href="#After-fix-the-bomb" class="headerlink" title="After fix the bomb"></a>After fix the bomb</h2><p>用显示器给那台临时的电脑供电，貌似会翻车。出现在更换的第二天 &amp; 2021 年的第一个工作日，现象是黑屏。系统提示电池需要维修，使用标准的 Mac 65W 充电器可以恢复。小心翼翼地重新插一下显示器，似乎也可以恢复(?)</p><p>之后电脑修好了，又换回来。由于我司 IT 似乎在哪里整了个 bug，于是迁移的时候建议我不要迁移用户配置。之后老办法操作迁移，之后果然配置都重置了(废话)，这里面影响比较大的包括：Dock 的位置、Terminal 的配色方案、显示器摆放位置、键盘设置等。键盘设置包括输入法，我之前装的 sogou input 似乎因为一些奇怪的原因不能用了，切过去会闪退，并被强制使用默认中文输入法。此外还有一个最大的问题是，指纹不能用了，添加指纹的时候总是提示「cancelled by another authentication」。</p><p>于是把指纹的问题又抛给 IT。IT 鼓捣了一会，结果把电脑整个锁住了(真危险呐)；于是最后变成了重新装系统并重新迁移。这次我要求把用户配置一起迁移过去，毕竟确实还是有点麻烦的。又完整迁移了一次，因为这次带着所有的配置过去了，所以还比较满意。不过指纹的问题还没有解决，之后再说就是了，目前不使用 Touch ID 也是可以接受的。</p><p>另外迁移的时候，隐私配置有一部分被重置；之后 Logi Options Daemon 有个权限申请我手抖给拒绝掉了，最终导致我的鼠标不好使，因此折腾了一会，需要用 Logi 安装时给的 Uninstaller 完整卸载一次，之后手动找到那个 Daemon App 并添加辅助功能的权限。总结 Mac 迁移需要注意的点主要如下：</p><ol><li>迁移助理记得勾上全部选项</li><li>可以预先删掉原来的指纹</li><li>隐私相关配置不要手贱</li></ol><p>以上，下次更新就是等 Touch ID 的问题 fix 了。</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Last CCCC，一篇流水账</title>
      <link href="/the-last-c4/"/>
      <url>/the-last-c4/</url>
      
        <content type="html"><![CDATA[<p>虽然含金量不如 xcpc，但是 C4 是个人感觉打得最爽的系列赛(暴力大赛?)。在现场赛纷纷转线上的大背景下，有幸复活，感谢主办方给机会！从不完全数据来看，本场应该是世界上规模最大的在线比赛了(?), Memorable!</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>头一次的 C4 是校内选拔赛，也是唯一一次校内夺冠。虽然只是拉了点原题打打 vj，然而选拔赛打不过队友，校赛打不过另一个队友，所以只能🐶C4了？于是进了一队，进去发现除了选拔赛打了前二，剩下的全**黑幕（大雾）</p><p>那一年的 C4 有预赛和决赛之分，所以预赛的题比较水，3-1 还出了个高中物理。决赛倒是比较难的，不过因为学校没钱，只去了一个队(10 个人绿皮火车去杭州，已经浩浩荡荡了，30 人不敢想)，成绩又是算三个队总和的，所以倒也无所谓，主要还是旅游了。</p><p>之后两年的 C4 就没有决赛和旅游了，先给差评。题目难度也有调整，尤其是去年槽点很大的 L1 字符串专场。不过由于 Codingame 打得多，所以倒也能从容应对，不过给 Python 就更好了(?)。但就全队或者全校来说，不能拿到 L1 大部分分数的情况长期存在，进一步导致没有时间开 L2 可做的题。今年赛前据说要冲国一，于是吸取了往年某些同学一分不骗的教训，以及应学弟的邀请给大家简单讲了些技巧，见附录。</p><h2 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h2><p>今年线上 C4，监考用的 OMS。其实因为没有参加过 PAT，也忘了前一年有没有用了，所以四舍五入就是第一次用。之后一个最大的问题就在于：OMS 不支持 MacOS，于是赛前的晚上临时顶上一个 Surface Pro 6，并且现配环境。由于之前种草了 Windows(可能是 Windows Terminal 和 W$L2)，所以这次也顺便体验一把。</p><p>然而因为规则说不让用虚拟机，为了避嫌首先排除了 W$L2。编辑器毫无疑问，上 VS Code。编译器则是向学弟分别要了 MinGW-w64 和 jdk1.8，所有 C4 支持的语言都是要安排上的。之后装个 Code Runner 就有很正确(?)的参赛体验了。</p><p>然而由于先启动了 VS Code 再配的编译器 PATH，结果不管我怎么重启里面的终端，都不能正常找到编译器。然后尝试把默认的 pwsh 切换回 cmd，再在 VS Code reload window 也不行。最后 PaperCube 学弟提醒在 Windows 上需要<strong>重启</strong>而不是 reload VS Code，新配的 PATH 才能生效，奥妙重重(后来想了想好像也是有道理的，这个 PATH 不是终端启动的时候设进去的)。</p><p>然后为了方便本地的一些计算，比如打表，还需要加装一个 Python。起手先从官网下了个，然而配了 PATH 依旧不能正常 work，甚至跳出了 Windows Store 推荐我安装他提供的 Python。那好吧，卸载下好的 Python，从 Store 安装，倒也好用。途中顺手装了一个 Windows Terminal，确实酷炫，不过装归装，貌似比赛用不太到。</p><p>因为是线上赛，所以更进一步再装点好的插件。用了挺久的 TabNine，这个确实很牛逼，个人感觉能提升 20% ~ 30% 的手速，装。之后又测了各个语言编译运行是否 work，顺带装了一圈各种语言推荐的插件。然而后来觉得竞赛不需要这些多余的 Language Feature，事实上只有自动补全就足够了，于是又卸载。额外装了 Jupyter Notebook 插件，感觉 REPL 的方式跑 Python 可能会更方便一些，然而<code>pip install</code>过去了一百年。</p><p>另外测 OMS 的时候发现自己没有查看相关的邮件，差点 gg。大概流程是用手机微信小程序扫一个码，然后再扫本机 OMS 的码，然后把两个码的信息集中上报，通过审核就进系统了。</p><h2 id="赛中"><a href="#赛中" class="headerlink" title="赛中"></a>赛中</h2><p>开这篇的目的似乎主要是吐槽 Windows？反正我是第一次写这种比赛时的体验，因为正常来说没什么好写的，要不然就啪啪啪敲啊敲，要不然就罚坐。虽然说是做了如上的准备，但还是架不住 1. Surface 的触控板太硬，不习惯; 2. 不分 Command/Ctrl 键，还是拔草了。不过也有优点，例如进入比赛的时候可以用触摸屏点击进入，节省了移动鼠标的时间。</p><p>主办方给了过多的赛前准备时间，于是产生了开赛先罚坐的场面。当时感觉手有点冷，抢先锋怕是抢不过牛逼网友了。果不其然，进比赛后虽然找到了最好写的 2-3，然而没有想清楚就开始写，第一发想挫了没有得到满分，注定是抢不到先锋的 qwq。于是在上面浪费了 20 分钟，然后冷静了一下用 5 分钟重写了这题，一次性通过了。</p><p>之后准备回去开 L1，瞄了眼榜发现 PaperCube 写了 25 分的 3-1，心想这把有的玩了。L1 意外地很顺利，可能是题水了，一路输入输出输入输出，用了 40 分钟左右拿了满分。20 分的题题意有一些迷，但是枚举题意就可以过。后来据说 L1 有题目输入数据有锅，很神奇地没有被坑。2-1 也是水题，不过题意没怎么看清楚，搞不清楚到底是正着算还是倒着算，枚举一下题意就过了。之后看了下 2-2 是个模拟，2-4 是个图论(?)，选择了先开 2-4。定睛一看是个假图论，存一个邻接矩阵按题意模拟就行了。</p><p>这个时候看了看总榜，队伍从二等跳进一等区域了，然后感觉 L2 分够了，就先去领了 3-1 的白给 25 分。回去写 2-2，大概用了 20 分钟，不过可能是题意没有理解到位，总是差两个点过不去。而且更过分的是，枚举了几种题意，永远是差那两个点。这时手上开了但没有满分的只有 2-2 和 3-1，就去看 3-1，发现是一个 TLE 一个 WA。由于只剩 5 分，就不打算修 TLE 了，但是也没看出来哪里 WA 的，遂又作罢。</p><p>又看了看 3-2 和 3-3，结合榜单自认都是神仙题 + 有可观的暴力分。回 2-2 继续枚举了下题意，多给了 2 分，但还剩的 2 分就怎么也枚举不出来了。看了看还剩 40 分钟，看题面以为 3-3 有什么奥妙之处，于是按「随机」的题意交了个$\frac{2^n(n-1)n}{2}$，还以为 C4 总算快速幂派上用场了，然而并没有。不仅快速幂没有派上用场，预先装的 Jupyter 也没有派上用场，本来只是想算个式子，结果打不开了(也许是因为后来卸载 Python 插件的缘故)。不过这里点名表扬下 powershell，提供了计算表达式的能力，<del>比 bash 不知高到哪里去了</del>。</p><p>3-3 骗不过去，也想不到怎么暴力，就去搞 3-2。3-2 写了个<code>multiset</code>+<code>lowerbound</code>暴力，然而调样例一直没过。最后去掉了引用，神奇地过了样例(我不会 C++，所以没想明白这是怎么回事)，交。然而给了 0 分。样例怎么测都是对的，纳闷了一会，在比赛结束的最后时刻发现多打了一些调试输出，立马删除重新交。比赛开始的时候没有机会欣赏，在最后时刻看到了上万长度的评测队列，心想要是刚才没改对咋整，于是又多交了一发。比赛结束后返回了 18 分，对我来说可以算是完美谢幕了。</p><p>嗯，总结就是：Surface + Windows = 不太好使，枚举题意 + 暴力模拟 = C4。以及验证了 Competitive Programming 只需要 Autocomplete 的想法(从准备和结果上来看)。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下记录了赛前给学弟的 C4 要点分享。</p><blockquote><p>尽量多写题，不要求非得 AC</p><ul><li>L1 100 分，拿 95</li><li>L2 100 分(4*25)，拿 75</li><li>L3 90 分(3*30)，争取拿 45</li></ul><p>套路</p><ul><li>读含空格行，一般在 L1 有一道。向 PaperCube 请教下 stringstream</li><li>并查集，一般在 L2 有一道</li><li>最短路，一般在 L3 有一道。没有也可能用最短路歪过一些点</li><li><del>快速幂(?)，好像没用</del></li></ul><p>先锋注意点</p><ul><li>先锋是按 level 算的，不是按题的！！<ul><li>如果要抢，先看清楚哪题好写</li><li>如果要抢，只写一题</li><li>要不要抢自己评估。前提是 L1 有把握</li></ul></li></ul><p>科学得分</p><ul><li>L1 一共 8 题，一小时搞定。少 a 几个小点不那么重要，<strong>除非不够进阶分并且就差你了</strong><ul><li>当然一小时过去 L1 还有题没开的话，<strong>一定要写</strong></li></ul></li><li>L3 爆搜能上直接上，但是不大好过样例的大模拟要谨慎</li><li>L3 一般有一个输出样例能过的点。如果答案值域比较少，能随机一把多拿个点更好</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
            <tag> 码力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shortcuts 初探</title>
      <link href="/Shortcuts/"/>
      <url>/Shortcuts/</url>
      
        <content type="html"><![CDATA[<h2 id="Shortcuts-快捷指令"><a href="#Shortcuts-快捷指令" class="headerlink" title="Shortcuts/快捷指令"></a>Shortcuts/快捷指令</h2><p>Shortcuts 的前身是 Workflow，一款自动化工具。2017 年被 Apple 收购后免费提供下载，iOS 12 发布后更名并支持被 Siri 调用。</p><p>以下内容摘自 Apple 官网:</p><blockquote><p>快捷指令可让您使用 App 快速完成任务，只需轻点一下或询问 Siri 即可。</p><p>快捷指令可以自动化各种任务，例如，获取前往“日历”上下一个日程的路线、将文本从一个 App 移到另一个 App、生成支出报告等。</p><p>基于您使用 iOS 或 iPadOS 设备的方式，如 App 使用以及浏览器、电子邮件和信息历史记录，Siri 可以建议简单实用的快捷指令，快速轻点即可运行。创建快捷指令后，您可以直接召唤 Siri，然后说出快捷指令的名称即可运行它。</p></blockquote><p>思路和 MacOS 上的「自动操作」（也就是 Apple Script）一样，为了支持自动化而生。然而操作上更加傻瓜化，可以算一种 no code 编程。内置了丰富的操作，单纯是控制 iPhone/iPad 本身是非常够用的了，比如开关闹钟什么的。另外也有需要想象力比较能拓展的，比如「打开 URL」（结合简单的 WebHook）、「通过 SSH 运行脚本」（结合服务器，可以干任何事情）。</p><h2 id="绿码"><a href="#绿码" class="headerlink" title="绿码"></a>绿码</h2><p>虽然当时 Workflow 可以免费下载后就安装了，但是一直没有找到使用的契机。最近出入各大商场，由于时常要出示绿码，于是想了这一招来解放手指(雾)。</p><p>iOS 14 引入了新的交互，支持敲击背面两下或三下拉起某些自定义操作。其中就包括调用 Shortcut。那么只要能用 Shortcut 拉起支付宝的绿码，就可以实现<strong>敲击背面两下快速打开绿码</strong>。这个功能在逛街的时候非常有用(大概)，<del>不过首先你的 iPhone 不能套手机壳</del>。</p><p>事实上，这种功能，由支付宝本身来提供当然是最好的。支付宝确实有。不过只能拉起健康码小程序，之后还需要选择地区才能转到绿码界面，不够方便。</p><p>不过话说回来，目前的形势来说，各地的健康码基本上是可以互通的。所以我们从简，直接以打开上海随申码为最终目的。这里唤起支付宝中的某个子功能，需要用到 URL scheme。这是个什么玩意，具体可以参考<a href="https://sspai.com/post/31500" target="_blank" rel="noopener external nofollow noreferrer">这篇文章</a>。有了这个，直接用「打开 URL」就可以跳转了。所以问题再次被简化成「获取上海随申码的 URL scheme」。</p><p>当然我不是专业的客户端选手，所以只能乱搞。首先是在支付宝里手动调出随申码，然后点分享把链接拷贝出来：<a href="https://m.alipay.com/XoNykfX" target="_blank" rel="noopener external nofollow noreferrer">https://m.alipay.com/XoNykfX</a></p><p>看起来是个短链接，所以继续丢浏览器。不过丢电脑浏览器似乎并没有用，所以继续在手机里操作。Safari 提示是否打开支付宝，这时选择否，之后地址栏的链接变成：<a href="https://render.alipay.com/p/s/i/?scheme=alipays%3A%2F%2Fplatformapi%2Fstartapp%3FappId%3D2019072665939857%26page%3Dpages%252Fmy-station-type%252Fmy-station-type%26enbsv%3D0.2.2010110333.12%26chInfo%3Dch_share__chsub_CopyLink" target="_blank" rel="noopener external nofollow noreferrer">https://render.alipay.com/p/s/i/?scheme=alipays%3A%2F%2Fplatformapi%2Fstartapp%3FappId%3D2019072665939857%26page%3Dpages%252Fmy-station-type%252Fmy-station-type%26enbsv%3D0.2.2010110333.12%26chInfo%3Dch_share__chsub_CopyLink</a></p><p>虽然不知道是什么玩意，但看到了一个 scheme 参数。拷出来 URL Decode 一下，然后精简掉一些看起来没有用的参数，得到：alipays://platformapi/startapp?appId=2019072665939857&amp;page=pages%2Fmy-station-type%2Fmy-station-type</p><p>上面这个看起来就是需要的 URL Scheme 了。建了个 Shortcut 试验了一下，成功跳转到了绿码界面。虽然里面没有任何复杂逻辑，仅有一个「打开 URL」的操作，但还是分享出来，有需要的可以<a href="https://www.icloud.com/shortcuts/f15b22ca658b4117b990a2033f3127c1" target="_blank" rel="noopener external nofollow noreferrer">点击这里</a>自取。</p><p>最后在<code>Settings &gt; Accessibility &gt; Touch &gt; Back Tap &gt; Double Tap</code>设置好这个 Shortcut，就可以完成敲击背面两下快速打开绿码了~</p><h2 id="What’s-more"><a href="#What’s-more" class="headerlink" title="What’s more"></a>What’s more</h2><p>现在回忆起来，要是早点提供这个功能/早点发现这个功能，其实可以解决之前的一些痛点。</p><p>犹记得当年的算法课设，custoj 还用的是 OnlineJudge 1.0 版本，存在某个内存泄露的 bug。提交量一上来，就需要频繁重启 judge server，否则大家的提交集体 RE。然而那几天女票飞过来陪我，有的时候在外面玩不在电脑前，出了前述的问题时没法及时操作重启。</p><p>如果当时可以在手机上用 Shortcut(当年应该还叫 Workflow，不过不知道是不是真的给了这个功能，毕竟 Apple 收购后下放了更多的权限给 Shortcut)通过 SSH 运行脚本(当然是喜闻乐见的<code>docker-compose restart</code>啦)做重启，那许多同学应该会少遇到几次<code>Runtime Error</code>。</p><p>不过另一方面，客户端仍然是相对封闭的，不像网页，可以通过 CSS Selector 选择元素，并用<code>.click</code>之类的方法做一些自动化操作。如果 Shortcut 能直接操作 App 内部的元素，就更方便、更有用了。对于绿码的 case，我第一反应是先怼上一个「打开 App」的操作，把支付宝打开以后再在里面操作。关于这个反应，主要还是不熟悉 Native，习惯了 Web 平台，经常用 e2e test 框架搞一些事情，后来发现显然是行不通的，才转而研究 URL Scheme 的方案。</p><p>据说还有一个更强大的自动化工具 Pythonista，由于收费所以没有去体验，不过在 Shortcut 里看到了调起 Pythonista「编辑脚本」、「运行脚本」的操作，不确定是否能力更多，比如往里面怼一个 Selenium/Appium。</p><p>最后想说的事情就是，在 iPhone/iPad 上奇妙的东西还是不少的，需要更多的探索。</p><h2 id="UPD-Change-Video-Speed"><a href="#UPD-Change-Video-Speed" class="headerlink" title="UPD: Change Video Speed"></a>UPD: Change Video Speed</h2><p>因故需要在床上使用民间网站观看视频时，偶然萌生的想法。拿着 iPad，对着一个几近原生的 HTML5 video 播放器，找着倍速按钮，忽然想起，如果是在电脑上，打开控制台敲一行 JavaScript ，修改对应 video 元素的<code>playbackRate</code>就可以实现倍速播放，那在 iPad 上 Shortcuts 刚好是一个 JavaScript 在 Safari 上操作的入口。于是随手就干了一个用上。</p><p>之后一日忽然又想起这码事，想着再润色一下，比如加个输入加速倍率什么的，于是再次打开了 Shortcut。最初的代码是直接拉进来的示例代码改的，看了看看到一个奇特的<code>completion</code>函数(当时印象很深，去掉是不允许的)，想着上网查一下这玩意的定义，于是找到了<a href="https://support.apple.com/zh-cn/guide/shortcuts/apd218e2187d/ios" target="_blank" rel="noopener external nofollow noreferrer">这个页面</a>。这时感觉自己 sb 了，原因见下方配图(转自前述页面)。<br><img src= "/img/loading.gif" data-src="https://help.apple.com/assets/5E8CEA35094622DF10489984/5E8CEA42094622DF1048998D/zh_CN/59ce31745495c14b08483a6714b8bcd0.png" alt=""></p><blockquote><p>💡【提示】<a href="https://www.icloud.com/shortcuts/d2948a841a22f40868163cb00fdd14e3" target="_blank" rel="noopener external nofollow noreferrer">Change Video Speed</a>（更改视频速度）快捷指令在“快捷指令中心”中可用。</p></blockquote><p>💡个鬼啊摔，你已经写好了你不早说。。于是不准备做什么润色了，直接拿来主义。然而亲测了一下，告诉我「快捷指令链接可能已经无效或已删除」</p><p>？？？</p><p>好吧，🍎是大爷，对着您截图的代码再敲一遍总行。。当然这里最后还是偷懒了，默认页面上有且仅有一个 video 播放器(有多播放器的需求那再说呗，没有播放器报错了也无所谓)。分享在<a href="https://www.icloud.com/shortcuts/c3b858796d464e5a91d8bda2bfd6eb47" target="_blank" rel="noopener external nofollow noreferrer">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monorepoization, and...</title>
      <link href="/monorepoization/"/>
      <url>/monorepoization/</url>
      
        <content type="html"><![CDATA[<h2 id="Monorepo"><a href="#Monorepo" class="headerlink" title="Monorepo"></a>Monorepo</h2><p>Monorepo 是一种代码组织方式，将所有有关项目都放在同一个 repo 中。与 Multirepo 相对，Multirepo 中各个项目各自拥有各自的 repo。</p><blockquote><p>据说，Google 所有的代码都维护在<strong>一个</strong>「repo」里，这也可以理解成「monorepo」。</p></blockquote><h2 id="Why-monorepo"><a href="#Why-monorepo" class="headerlink" title="Why monorepo"></a>Why monorepo</h2><p>在初期开发的时候，基本上就是一个模块开一个 repo 的，基本比较流畅。尤其是我使用了<code>create-react-app</code>这一类的东西，会直接帮你建好一个新的 git repo。之后也是一个 repo 一个 repo 地测试和打包镜像，如果后一个 repo 依赖前一个 repo 提供的服务，也是通过起 Docker 容器的方式满足后一个 repo 的依赖来调试。</p><p>整个项目基本完成以后，也就暂时放在那了(即使还有不少已知 Bug)。之后想找个地方记一下有哪些 Bug，当然首先是想到了 GitHub 的 issues 模块，结果一看就傻眼了，很纠结有些 Bug 到底应该提到哪里，如果太散乱也不好管理。这时就种草了 monorepo。</p><p>另外其实这个项目目前就我一个人搞，把 repo 搞的到处都是也不方便自己浏览和维护。而且名字类似的一长列 repo 占据了我的 GitHub 首页左边栏，也有碍观瞻。总之，最后就下定决心要把这些 repo 迁移到一个 monorepo 了。</p><h2 id="Tomono"><a href="#Tomono" class="headerlink" title="Tomono"></a>Tomono</h2><p><a href="https://github.com/hraban/tomono" target="_blank" rel="noopener external nofollow noreferrer">tomono</a> 是一个「Multi- To Mono-repository」的迁移工具。这是一个 shell 脚本，只有 100 来行。使用也比较方便，简单来说，你给它一个 repo list，它会自动帮你梳理 git log/branch/tags，合理地将多个 repo 合并成一个 repo。具体的代码和用法可以直接在 GitHub 参考。个人的用法比较粗暴，直接一个文件夹一个 repo 放在根目录下，没有像 lerna 那样再套一层 packages 路径。其实由于这个项目没有 npm 模块需要发布，所以没有必要使用 lerna 等 monorepo 管理工具。</p><p>由于 tomono 的过程中需要做<code>git fetch</code>，而我这些 repo 中其中有一个和环境配置有关，放了很多编译产物，比较大，于是先从 list 里去掉了。tomono 很顺利地帮我合并了剩下的 6 个 repo。由于这些 multirepo 我之后不再需要了，因此要不然 delete，要不然 archive 了。但 tomono 自动会在 remote 里添加这些旧的 repo，因此需要手动<code>git remote remove</code>掉。当然，还要把最后那个 repo 手动<code>mv</code>进来。tomono 不会处理你的 LICENCE 和 .gitignore，可以自行拿出来或者合并一波。</p><h2 id="After"><a href="#After" class="headerlink" title="After"></a>After</h2><p>由于多个 repo 合并成了一个，有些问题之前影响不大，现在也暴露了出来。最典型的就是 GitHub 页面上显示的 Languages 比例直接歪了。本来这个项目应该是一个 Python 和 JavaScript 再加上一些 C 语言的项目，结果因为 C 语言那边放了一个<code>argparse3</code>依赖库，直接就以将近 50% 的比例当选了这个项目的代表语言。此外，那边的编译产物的一堆 html 格式的文档和脚本，也占了一大片山头。</p><p><img src= "/img/loading.gif" data-src="/images/languages_before.png" alt="before"></p><p>这时候就需要在根目录建一个 .gitattributes 文件，对一些不应该计入语言统计的文件设置<code>linguist-vendored=true</code>参数，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">argtable3.* linguist-vendored=true</span><br><span class="line">some_repo/some_build/**/* linguist-vendored=true</span><br></pre></td></tr></table></figure><p>这样就科学多了。</p><p><img src= "/img/loading.gif" data-src="/images/languages_after.png" alt="after"></p><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>CI/CD 指的是持续集成/部署。一个很 DevOps 的概念。主要是关于代码写完之后一些自动化的事情，例如编译构建镜像，以及测试、发布等。</p><p>repo 组织形式的变更，也伴随着 CI/CD 方式的变更。相对语言统计什么的来说，这是个比较大的问题。</p><p>本来这个项目的 7 个仓库，其中 5 个是需要 build 出镜像的，其中 2 个对另 1 个编译出的镜像产物有依赖。还有 2 个仓库，一个用来放些部署配置，一个是端到端自动化测试。</p><p>之前是在阿里云的镜像中心管理的，为了<code>docker pull</code>速度相对可以接受一些。具体做法是每个 repo 开一个 image，master 分支有变更会触发 latest tag 的 image 构建。显然这在 monorepo 的场景下不再适用。</p><p>时过境迁，GitHub 也推出了看起来可用的 GitHub Actions，可以用 yaml 文件自定义 workflow 来做 CI/CD。有了 workflow，其实可以做到更多事情，例如构建完了部署一把，然后跑自动化测试。这在有机器人提 vulnerability 相关的 PR 的时候会非常有用，可以直接在页面上看到依赖版本变更有没有导致测试失败。显然之前 multirepo 的组织方式是没法做的。当然这和我这些仓库的拆分<del>以及没写单元测试</del>有关系。</p><p>例如，如下是一个示例的 Docker 镜像构建的 workflow yaml，放在<code>.github/workflows</code>路径下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Docker</span> <span class="string">Image</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">.</span> <span class="string">--file</span> <span class="string">Dockerfile</span> <span class="string">--tag</span> <span class="string">my-image-name:$(date</span> <span class="string">+%s)</span></span><br></pre></td></tr></table></figure><p>首先我们需要知道怎样的修改触发怎样的构建。第一步，构建镜像并 push 需要登录 Docker Hub，而为了密码不泄露，可以使用 GitHub 的 Secrets 功能，在里面增加对应的用户名和密码变量，并在 yaml 文件中使用。</p><p>对于 monorepo 的情况，我们需要根据哪些文件有改动来决定如何构建。GitHub 官方提供了 workflow 级别的<a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths" target="_blank" rel="noopener external nofollow noreferrer">这个 feature</a>，根据有改动的路径，我们决定不做哪些构建、做哪些构建。看起来没什么问题，但在 workflow 级别做这个事情还不够灵活。例如，不能满足构建镜像有依赖的情况。第三方 action <a href="https://github.com/dorny/paths-filter" target="_blank" rel="noopener external nofollow noreferrer">dorny/paths-filter</a> 则一定程度上增加了 path 检查的灵活性。它在 steps 级别，利用 filter 和 if 的功能使得一些操作的执行是有条件的。这样结合 steps 的串行执行我们可以处理镜像构建时 A、B 依赖 C 的情况。不过也有个缺点， A 和 B 的构建这样就不能并行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pipeline</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">dorny/paths-filter@v2.2.0</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">filter</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">|</span></span><br><span class="line">          <span class="attr">A:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'packageA/**/*'</span></span><br><span class="line">          <span class="attr">B:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'packageB/**/*'</span></span><br><span class="line">          <span class="attr">C:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'packageC/**/*'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">login</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">docker.io</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;</span> <span class="string">-p</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_PSWD</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">C</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.filter.outputs.C</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">build</span> <span class="string">packageC</span> <span class="string">--tag</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageC:latest</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageC:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">A</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.filter.outputs.C</span> <span class="string">==</span> <span class="string">'true'</span> <span class="string">||</span> <span class="string">steps.filter.outputs.A</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">build</span> <span class="string">packageA</span> <span class="string">--tag</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageA:latest</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageA:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">B</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.filter.outputs.C</span> <span class="string">==</span> <span class="string">'true'</span> <span class="string">||</span> <span class="string">steps.filter.outputs.B</span> <span class="string">==</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">build</span> <span class="string">packageB</span> <span class="string">--tag</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageB:latest</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HUB_USER</span> <span class="string">&#125;&#125;/imageB:latest</span></span><br></pre></td></tr></table></figure><p>自动化测试则需要另一个 workflow。测试用例使用了自动化框架 TestCafe，其官方文档提供了一个 GitHub Action，用法如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">End-to-End</span> <span class="string">Tests</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">TestCafe</span> <span class="string">Tests</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">DevExpress/testcafe-action@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">            <span class="attr">args:</span> <span class="string">"chrome tests"</span></span><br></pre></td></tr></table></figure><p>当然，在运行测试<strong>前</strong>需要先部署，这部分就比较 trick 了，首先依然是按照上面的方法筛选变更的 path，之后由于部署时在<code>docker-compose.yaml</code>用到的镜像名是<strong>写死的</strong>，因此 workflow 中的镜像构建也需要使用<strong>相同的</strong>镜像名。这样可以做到本地构建过时先使用本地的镜像，本地没有时从 Docker Hub 拉取。</p><h2 id="Which-is-best"><a href="#Which-is-best" class="headerlink" title="Which is best"></a>Which is best</h2><p>相比 multirepo，虽然解决了依赖混乱和代码零散等问题，monorepo 也并非完美无缺的。比如导致了 repo 的体积非常大(尤其是有大文件的被合并入 monorepo)，而每次构建都需要全都拉取下来，拖慢了构建速度。以及在 CI/CD 时需要一些逻辑处理。</p><p>另外，虽说 monorepo 里应该放<strong>所有相关项目</strong>，但有的时候一些相关项目可以作为外部项目的依赖。这个时候也可以考虑拆出去，是有道理的。比如前文提到的 fetch 不下来的那个 repo，其实也可以给另外一个系统当基础镜像用，所以现在又在考虑是不是还是再拆出去比较好。当然还是需要一些权衡的，例如拆出去了以后 monorepo 里的依赖如何自动更新。</p><p>所以，事实上并没有最好的代码组织方式，无论是 multirepo 还是 monorepo，都各有优缺点。要根据具体的场景，决定是单独开一个新的 repo，还是写在已有的 monorepo 里。</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灾后重建</title>
      <link href="/recover-log/"/>
      <url>/recover-log/</url>
      
        <content type="html"><![CDATA[<p>2020 年 4 月 2 日，我的个人电脑(MacBook Pro 13-inch, 2018)遭到了不可逆转的毁灭性打击，损失严重，特此记录。</p><p>由于博客也是灾后重建的一部分，之后又花了一些时间完成毕业设计，因此晚了三个月才写下这篇文章。</p><h2 id="损坏与修复"><a href="#损坏与修复" class="headerlink" title="损坏与修复"></a>损坏与修复</h2><p>首先来捋一下时间线。</p><ul><li>目测 4 月 1 日凌晨触发了一次系统更新，因此当我 2 日打开电脑时指纹登录被停用，需要我输入密码。</li><li>2 日晚上一边使用网易云音乐，一边使用 Sidecar 功能连接 iPad 做第二屏幕，之后突然就卡住了。于是强制关机。<ul><li>18 年的 mbp 有个通病，总会突然卡住然后重启，和 Apple T2 安全芯片有关。</li><li>我遇到过几次上述问题，尤其是刚拿到手那段时间。但是每一次都有网易云音乐正在播放，可能有毒…</li><li>这次尤为严重，卡住后不能重启了</li><li>系统版本应该是 macOS Catalina 10.15.4</li></ul></li><li>关机后尝试马上开机，没有任何反应。抱着一丝希望等它恢复到可以启动的状态，于是去洗澡了。然而等到机身都冰凉了，还是没有任何响应。</li><li>通过搜索引擎，尝试了几种常见的 Mac 开机无响应的解决办法，无果。遂访问 Genius Bar，预约了第二天的电话支持和周末的现场支持。</li><li>3 日电话支持，大部分依然是前一天查到的操作，似乎也尝试了一个没看到过的办法，但依旧无果。感觉时间拖得越长，对这种能自己操作的办法越不抱希望，预感到拆机是不可避免的了。</li><li>4 日直奔附近的 Apple Store，跟店员说了大概的情况(包括常用方法已经尝试无果)，几分钟就交机了，结论是直接换主板，主板含存储盘，数据不保证能挽救。</li><li>11 日中午 Apple Store 来电通知数据不可恢复，傍晚通知可以取机，于是第一时间前往，取回更换主板后的「新机」。</li></ul><p>从损坏到修复，一共过去 10 天。维修效率还是比较符合预期的。但是损坏这件事情本身就完全是预期外的。进一步询问维修人员，也只是表示主板出这种问题几率很小(个人推断还是 T2 芯片直接把主板整个锁死了)</p><p>于是偶尔考虑了下离开生态，毕竟 Mac 也没有很可靠嘛。然而并过不去<code>⌘</code>键和<code>⌃</code>键合并的坎。已经习惯了<code>ctrl:nocaps</code>的键位，有个<code>⌘Command</code>键对我来说是十分重要了(<code>⌃Control</code>键就应该干 control 的事情嘛)。不过不得不说，除了这个键盘问题，其他方面 M$ Windows 做得已经日趋完善了。</p><p><img src= "/img/loading.gif" data-src="/images/geniusbar.jpg" alt="Genius Bar 工作授权"></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>在损坏之前，我并没有很重视数据的备份。所以是真的很痛。</p><p>幸好，还是有一部分数据可以立马找回来的。主要分别是</p><ul><li>GitHub 上的代码，例如 CustOJ、CustIDE 等</li><li>阿里云上部署的代码，例如 CustReg、高德地铁路线爬虫脚本</li><li>百度网盘，保存了两个收钱做的外包项目、JoblabX的参赛代码等</li><li>公司的 Mac 和开发机里，终端配置和<code>.zshrc</code>、<code>.vimrc</code></li></ul><p>丢失的主要有</p><ul><li>毕设开题报告，虽然上交给老师了，但刚好老师的电脑被他老婆格式化了…</li><li>为了毕设找的一些参考文献，有些公网不好找的还是只能麻烦 @bigstomach 再下一份</li><li><strong>本 Blog 的部署源码</strong>，毕竟 GitHub Page 只托管静态产物</li><li>ACM 模板，源码和产物都丢失了（虽然也退役了</li><li>个人简历的 tex 源码，现在只有 pdf 留在 Google Drive 上了</li><li>一些出题用到的代码和数据</li><li>一些 pyspark 脚本</li><li>各种杂物，主要集中在以前的<code>~/</code>里</li></ul><p>当然，还有很多软件要装。主要麻烦的可能是一些 Adobe，以及 Wolfram Mathematica。不过最近 Wolfram Cloud 免费大放送，暂时先用着。</p><p>由于 4 月刚好是毕设中期，所以抓紧先重写了开题报告(幸好当时还没有真正开始写毕设，否则可能还没 git 过就 gg)</p><p>至于博客，则是到了最近才开始着手重建。这次干脆就从老的 Next Theme 换成了新的 Butterfly，多了许多功能和特效，然而也吃图。</p><h2 id="过渡的设备"><a href="#过渡的设备" class="headerlink" title="过渡的设备"></a>过渡的设备</h2><p>事实上我有两台💻，但是公司发的 15-inch 实在是太重了，并不想背来背去，而且新买的 iPad 当然要体验一下。于是 iPad 就当了几天家用主力机。</p><p>我购入的是 iPad Pro 2020 11” Wifi 版，几乎是国内最早一批拿到手的。当然当时还没有发售「悬浮」的 Magic Keyboard，临时用一把 Logitech k380 顶着，没有触控板也没有鼠标。</p><p>买它的时候，我确实被「你的下一台电脑，何必是电脑。」的广告语吸引住了。没想到一语成谶，直接把 mbp 搞挂来使得 iPad 替代「电脑」的位置…(具体的使用体验，可能将来会开一篇文章分享)</p><p>不过，在那几天，iPad 确实表现还是比较出色的。至少，我使用它和自己写的 CustIDE 通过了 Google Code Jam 的初赛，还通过带有 ssh 功能的 app 在云主机上做了一些小修改和运维。不过，很大一部分时间，是用浏览器来调研网盘了。</p><h2 id="备份方案"><a href="#备份方案" class="headerlink" title="备份方案"></a>备份方案</h2><p>数据备份确实很重要的，可能只有翻过车才能意识到。</p><p>这次拿到全新系统后，首先是确认了 iCloud 处于启用状态。iCloud 在生态内还是很好用的，桌面、文稿等几个位置都可以自动同步到云上，也可以跨设备同步小文件什么的。当然，网盘的使用也要考虑到非的设备。</p><p>各方面考虑下来(具体怎么考虑的已经忘了，有空想起来再补吧)，最后选择了 M$ 家的 OneDrive 做数据备份和同步。因为买的是 365，所以还享受到了正版的 Office 三件套，在毕设的论文撰写和答辩中还是起到了很大作用的，感觉不亏。之后文档备份，如果使用 Word 之类的，可以直接建到 OneDrive 里，所有设备都可以同步。</p><p>OneDrive 在 Mac 是可以映射成一个文件夹来使用的(Windows 貌似是挂盘，本质上同理)。我把这个文件夹直接放在<code>~/</code>下了。它支持软连接出来，映射到本机的其他路径下，但反过来不行。于是像博客源码这一类的，我会先在 OneDrive 建立好路径，然后<code>ln -s</code>到<code>~/blog</code>，这样在本机操作<code>blog</code>目录就直接同步到 OneDrive 了。</p><p>另一方面，如上所述，我习惯放很多杂物在<code>~/</code>里。这些东西我也是需要备份的，但是显然做不到实时。于是基于<code>rsync</code>写了个脚本，来支持<code>~/</code>下单文件的准实时同步，用<code>crontab</code>实现每 10 分钟同步一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sync_home.sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">src_dir=<span class="string">"<span class="variable">$HOME</span>/"</span></span><br><span class="line">dest_dir=<span class="string">"<span class="variable">$HOME</span>/OneDrive/ccw/"</span></span><br><span class="line"></span><br><span class="line">rsync -a --delete --exclude=<span class="string">'*/'</span> <span class="variable">$src_dir</span> <span class="variable">$dest_dir</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">*/10 * * * * ~/sync_home.sh</span><br></pre></td></tr></table></figure><p>能解决<code>~/</code>里的杂物，其实就解决了很大一部分问题。其他成库的代码，都会被传到 GitHub(微软接手后放开了私有仓库的限制，好好利用)。</p><p>总结，我可能又要成为软吹了【</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
            <tag> 纪念 </tag>
            
            <tag> 运维 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces - April Fools Day Contest 2020</title>
      <link href="/Codeforces-April-Fools-Day-Contest-2020/"/>
      <url>/Codeforces-April-Fools-Day-Contest-2020/</url>
      
        <content type="html"><![CDATA[<p>一年只有两场 cf，一场 Goodbye，一场 April Fools Day Contest。</p><p>本场比赛给了 8 个题，但各个题的难度都比往年有所降低。至少我打到最后还有过题，并且剩下两题都有所思路。这在往年是不敢想象的，毕竟愚人节赛以令人摸不着头脑著称。</p><p>这一次总共过了 6 题，达到了之前未曾达到的过题数。可惜有些想的慢或者写的慢了，不然至少还能多过一题</p><h2 id="A-Is-it-rated"><a href="#A-Is-it-rated" class="headerlink" title="A. Is it rated?"></a>A. Is it rated?</h2><p>Solved. 00:03 (+)</p><p><a href="https://codeforces.com/contest/1331/problem/A" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>No.</p><p>一个没有题面的签到题 with an announcement</p><blockquote><p>General announcement</p><p>We are aware that some of the problems don’t have the statement. This is by design! You have to figure out the problem yourself.</p></blockquote><p>开局几秒种交了一个<code>print(&#39;Yes&#39;)</code>上去，可惜没有反套路。如果 April Fools Day Contest 可以 rated，那真是天大的惊喜了 :P</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'no'</span>)</span><br></pre></td></tr></table></figure><h2 id="B-Limericks"><a href="#B-Limericks" class="headerlink" title="B. Limericks"></a>B. Limericks</h2><p>Solved. 00:19 (+)</p><p><a href="https://codeforces.com/contest/1331/problem/B" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><blockquote><p>There was once young lass called Mary,<br>Whose jokes were occasionally scary.<br>On this April’s Fool<br>Fixed limerick rules<br>Allowed her to trip the unwary.</p><p>Can she fill all the lines<br>To work at all times?<br>On juggling the words<br>Right around two-thirds<br>She nearly ran out of rhymes.</p></blockquote><p>经典的藏头诗(甚至感觉有点新意不够)</p><p>虽然说是 <em>Two Factors</em>, 不过当时没有仔细读题，看到「factor」又看了下样例随便写了一发分解质因数也过了。事实上题目<del>暗示</del>明示了输入是两个质数的积。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">while</span>(n!=i)</span><br><span class="line">      <span class="keyword">if</span> (n%i==<span class="number">0</span>)&#123;<span class="built_in">cout</span>&lt;&lt;i;n/=i;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-…And-after-happily-lived-ever-they"><a href="#C-…And-after-happily-lived-ever-they" class="headerlink" title="C. …And after happily lived ever they"></a>C. …And after happily lived ever they</h2><p>Solved. 00:23 (+)</p><p><a href="https://codeforces.com/contest/1331/problem/C" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>经典乱序。一般的语序是 <em>And they lived happily ever after</em>，再结合输入的数据范围是 0~63，相当于 6 位的二进制数，就大概知道怎么做了</p><p>一时想不出来怎么表示 6 个东西的顺序交换，就直接上 Python 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=bin(int(input()))[<span class="number">2</span>:]</span><br><span class="line">a=<span class="string">'0'</span>*(<span class="number">6</span>-len(a))+a</span><br><span class="line">a=list(a)</span><br><span class="line">a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>],a[<span class="number">3</span>],a[<span class="number">4</span>],a[<span class="number">5</span>]=a[<span class="number">0</span>],a[<span class="number">5</span>],a[<span class="number">3</span>],a[<span class="number">2</span>],a[<span class="number">4</span>],a[<span class="number">1</span>]</span><br><span class="line">print(int(<span class="string">''</span>.join(a),<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="D-Again"><a href="#D-Again" class="headerlink" title="D. Again?"></a>D. Again?</h2><p>Solved. 00:15 (+)</p><p><a href="https://codeforces.com/contest/1331/problem/D" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>很 kit1980 的一道题(原来是前几年出过类似的假装 OEIS 的题)，这次又<del>因为眼睛不好</del>被骗了一次，但幸好没过样例</p><p>一开始上 oeis 速览了样例给的几个数列，以为答案就是对应数列的首项了。又想到 oeis 可能是字典序升序的(其实不是，只有纸质书为了方便检索才这么做)，样例给了 A089956 是 0，A089957 是 1，那就是临界点了(完全没看到第一个样例是更大的 A278832)，然后就这么交了一发</p><p>Wrong answer on test 1 之后，沉思了大概不到 10 分钟，突然反应过来，这什么 sb 题啊 2333</p><p>这题按过题人数排名，是第二位的。我也确实是签完到马上去开的，不过失误了，浪费了一些时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=int(input()[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">  print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="E-Jordan-Smiley"><a href="#E-Jordan-Smiley" class="headerlink" title="E. Jordan Smiley"></a>E. Jordan Smiley</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1331/problem/E" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>题意给的很明显了，给了一个图片，输入给一个坐标，问是 in 还是 out</p><p>主要是处理图片的问题。大概可以先用 Photoshop 之类的图处理软件先把空的内部块填色(这样就不需要自己写 floodfill 来处理了)，然后再用 pillow 之类的图处理库处理一下坐标</p><p>过题的人也挺多了，懒得补了</p><h2 id="F-Elementary"><a href="#F-Elementary" class="headerlink" title="F. Elementary!"></a>F. Elementary!</h2><p>Solved. 01:39 (+1)</p><p><a href="https://codeforces.com/contest/1331/problem/F" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>先 Google 了一把，结果告诉我「基本演绎法」？？</p><p>在这里卡了挺久的，一大段时间在思考 F 和 G 之间反复横跳</p><p>最后意识到跟「Element，元素」有点关系。观察样例，输出 YES 的都是可以用元素周期表中的元素代号拼起来的</p><p>学弟搞了一把元素列表，直接嫖来了。然后写个搜索或者 dp 就可以了(贪心是不行的，WA 了一发)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l=set([<span class="string">"H"</span>,<span class="string">"HE"</span>,<span class="string">"LI"</span>,<span class="string">"BE"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"N"</span>,<span class="string">"O"</span>,<span class="string">"F"</span>,<span class="string">"NE"</span>,<span class="string">"NA"</span>,<span class="string">"MG"</span>,<span class="string">"AL"</span>,<span class="string">"SI"</span>,<span class="string">"P"</span>,<span class="string">"S"</span>,<span class="string">"CL"</span>,<span class="string">"AR"</span>,<span class="string">"K"</span>,<span class="string">"CA"</span>,<span class="string">"SC"</span>,<span class="string">"TI"</span>,<span class="string">"V"</span>,<span class="string">"CR"</span>,<span class="string">"MN"</span>,<span class="string">"FE"</span>,<span class="string">"CO"</span>,<span class="string">"NI"</span>,<span class="string">"CU"</span>,<span class="string">"ZN"</span>,<span class="string">"GA"</span>,<span class="string">"GE"</span>,<span class="string">"AS"</span>,<span class="string">"SE"</span>,<span class="string">"BR"</span>,<span class="string">"KR"</span>,<span class="string">"RB"</span>,<span class="string">"SR"</span>,<span class="string">"Y"</span>,<span class="string">"ZR"</span>,<span class="string">"NB"</span>,<span class="string">"MO"</span>,<span class="string">"TC"</span>,<span class="string">"RU"</span>,<span class="string">"RH"</span>,<span class="string">"PD"</span>,<span class="string">"AG"</span>,<span class="string">"CD"</span>,<span class="string">"IN"</span>,<span class="string">"SN"</span>,<span class="string">"SB"</span>,<span class="string">"TE"</span>,<span class="string">"I"</span>,<span class="string">"XE"</span>,<span class="string">"CS"</span>,<span class="string">"BA"</span>,<span class="string">"LA"</span>,<span class="string">"CE"</span>,<span class="string">"PR"</span>,<span class="string">"ND"</span>,<span class="string">"PM"</span>,<span class="string">"SM"</span>,<span class="string">"EU"</span>,<span class="string">"GD"</span>,<span class="string">"TB"</span>,<span class="string">"DY"</span>,<span class="string">"HO"</span>,<span class="string">"ER"</span>,<span class="string">"TM"</span>,<span class="string">"YB"</span>,<span class="string">"LU"</span>,<span class="string">"HF"</span>,<span class="string">"TA"</span>,<span class="string">"W"</span>,<span class="string">"RE"</span>,<span class="string">"OS"</span>,<span class="string">"IR"</span>,<span class="string">"PT"</span>,<span class="string">"AU"</span>,<span class="string">"HG"</span>,<span class="string">"TL"</span>,<span class="string">"PB"</span>,<span class="string">"BI"</span>,<span class="string">"PO"</span>,<span class="string">"AT"</span>,<span class="string">"RN"</span>,<span class="string">"FR"</span>,<span class="string">"RA"</span>,<span class="string">"AC"</span>,<span class="string">"TH"</span>,<span class="string">"PA"</span>,<span class="string">"U"</span>,<span class="string">"NP"</span>,<span class="string">"PU"</span>,<span class="string">"AM"</span>,<span class="string">"CM"</span>,<span class="string">"BK"</span>,<span class="string">"CF"</span>,<span class="string">"ES"</span>,<span class="string">"FM"</span>,<span class="string">"MD"</span>,<span class="string">"NO"</span>,<span class="string">"LR"</span>,<span class="string">"RF"</span>,<span class="string">"DB"</span>,<span class="string">"SG"</span>,<span class="string">"BH"</span>,<span class="string">"HS"</span>,<span class="string">"MT"</span>,<span class="string">"DS"</span>,<span class="string">"RG"</span>,<span class="string">"CN"</span>,<span class="string">"NH"</span>,<span class="string">"FL"</span>,<span class="string">"MC"</span>,<span class="string">"LV"</span>,<span class="string">"TS"</span>,<span class="string">"OG"</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(s)</span>:</span></span><br><span class="line">  res=<span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> len(s)==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">elif</span> len(s)==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> s[:<span class="number">1</span>] <span class="keyword">in</span> l</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> (dfs(s[<span class="number">1</span>:]) <span class="keyword">if</span> s[:<span class="number">1</span>] <span class="keyword">in</span> l <span class="keyword">else</span> <span class="literal">False</span>) <span class="keyword">or</span> (dfs(s[<span class="number">2</span>:]) <span class="keyword">if</span> s[:<span class="number">2</span>] <span class="keyword">in</span> l <span class="keyword">else</span> <span class="literal">False</span>)</span><br><span class="line">print(<span class="string">'YES'</span> <span class="keyword">if</span> dfs(input()) <span class="keyword">else</span> <span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure><h2 id="G-Lingua-Romana"><a href="#G-Lingua-Romana" class="headerlink" title="G. Lingua Romana"></a>G. Lingua Romana</h2><p>Solved. 01:57 (+)</p><p><a href="https://codeforces.com/contest/1331/problem/G" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>这题很考验 Google 能力了。先是翻译了一通，当然几乎什么也没看明白。最后在互联网的某个角落里找到了一种 perl 方言 —— <a href="https://metacpan.org/pod/Lingua::Romana::Perligata" target="_blank" rel="noopener external nofollow noreferrer">Lingua::Romana::Perligata</a></p><p>之后对着里面「可能是文档」的内容，再一个个查每个词在里面的相关内容，终于在最后连蒙带猜把题面翻译成了 C++ 程序(虽然基本是 C 语法)，一发过了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">double</span> A=<span class="built_in">sqrt</span>(<span class="built_in">abs</span>(a[i]));</span><br><span class="line">    <span class="keyword">double</span> B=<span class="built_in">pow</span>(a[i],<span class="number">3</span>)*<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">double</span> r=A+B;</span><br><span class="line">    <span class="keyword">if</span> (r&lt;<span class="number">400</span>)<span class="built_in">printf</span>(<span class="string">"f(%d) = %.2f\n"</span>,a[i],r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"f(%d) = MAGNA NIMIS!\n"</span>,a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-It’s-showtime"><a href="#H-It’s-showtime" class="headerlink" title="H. It’s showtime"></a>H. It’s showtime</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1331/problem/H" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>没补。据说是一种奇妙的语言，叫「ArnoldC」，总是以<code>IT&#39;S SHOWTIME</code>开头，以<code>YOU HAVE BEEN TERMINATED</code>结尾。用这个语言按题面写一下就行，但是可能需要学习一下这个语言是怎么写的。</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> April Fools Day </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Lambda 的坑 - Late Binding</title>
      <link href="/python-lambda-late-binding/"/>
      <url>/python-lambda-late-binding/</url>
      
        <content type="html"><![CDATA[<p>(第一次?)遇到了 Python 里的坑，特此记录。</p><p>Python 的 lambda 表达式是一坨〇，确实。</p><h2 id="翻车现场"><a href="#翻车现场" class="headerlink" title="翻车现场"></a>翻车现场</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    l.append(<span class="keyword">lambda</span>: print(i))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>以上代码是从业务逻辑中抽取的，已脱敏。大概的含义就是，分别把一个输出 0 的函数、输出 1 的函数、输出 2 的函数依次放到一个 list 里面。这个 list 可能是一个回调列表，或者会被遍历调用，whatever。对这个 list 里面的内容，唯一的要求就是，可以被无参数地调用(Python 里大概也算一种类型 - <code>callable</code>)。</p><p>首先按照正常人的逻辑思考，这段代码预期应该输出 0。那我们来运行一下，之后神奇的事情发生了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 1.py</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>我们看到，最终结果居然输出了 2。有点迷惑，但大概能想到因为<code>l[0]</code>调用时应该确实有<code>i=2</code>。</p><h2 id="和魔鬼作斗争"><a href="#和魔鬼作斗争" class="headerlink" title="和魔鬼作斗争"></a>和魔鬼作斗争</h2><p>不管是什么原因，解决问题才是第一要义。于是有了第二段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line">list(map(<span class="keyword">lambda</span> x: l.append(<span class="keyword">lambda</span>: print(x)), range(<span class="number">3</span>)))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>大概的思路就是，既然<code>i</code>影响了我们的调用，那我们就把<code>i</code>干掉。<code>foreach</code>的语义，可以简单的用无返回值的<code>map</code>替代(第三行这个东西是有值的，但我们没有用变量去接。它的值是<code>[None, None, None]</code>)。注意<code>map</code>后要自己迭代一下，例如转成<code>list</code>。否则它只是一个<code>map object</code>，<code>l</code>也不会被<code>append</code>任何对象。</p><p>去掉<code>for</code>迭代变量<code>i</code>的干扰后(虽然又有了一个 map func 参数<code>x</code>)，我们得到了所期望的结果。问题得到了初步的解决。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 1.py</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>注：当然这里可以写成<code>l = list(map(lambda x: lambda: print(x), range(3)))</code>，不过我们需要首先排除<code>append</code>带来的影响。这里其实尝试过<code>l = [lambda: print(i) for i in range(3)]</code>，显然并没有用。在这个问题上，列表生成器和普通循环没有什么区别。</p><h2 id="更好的办法"><a href="#更好的办法" class="headerlink" title="更好的办法?"></a>更好的办法?</h2><p>问题当然得到了解决，不过我感觉应该没人会这么搞。至少看起来就很怪。</p><p>遂 Google 之。组合了几个关键词后，大概用了这样的关键词: python lambda late binding，得到了想看的东西: Late binding closures。翻译过来就是闭包延迟绑定。Python 的 lambda 其实就是只能写一行的闭包。</p><p>一个比较可以参考的文章<a href="http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures" target="_blank" rel="noopener external nofollow noreferrer">传送门</a>。总而言之，这是个 feature，不是个 bug。文章里也给出了更加 common 的解决方法，虽然依旧是比较 hack 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    l.append(<span class="keyword">lambda</span> i=i: print(i))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>其实就是把<code>i</code>当默认的参数绑定进去，这样就不再是延迟的绑定，而是马上绑定进这个函数里。这样也行，改动比上面那种小。但是注释还是免不了的。</p><p>具体为什么会有这个 feature 呢？尝试写了一段 C++ 代码，也许有一些道理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;function&lt;<span class="keyword">void</span>(<span class="keyword">void</span>)&gt;&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    v.push_back([&amp;i]()&#123;<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;&#125;);</span><br><span class="line">v[<span class="number">0</span>]();</span><br></pre></td></tr></table></figure><p>这段代码输出结果是3，当然这是 C++ 的 for 循环导致的<code>i=3</code>。可以看到 capture list 中我写的是<code>&amp;i</code>，如果去掉引用其实就不会有这个问题。不过，对于没有这种概念的 Python，其实是没得选的。</p><h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> l = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  l.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i))</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node 1.js</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>不得不说，这个场景下，JavaScript 的闭包/lambda，写起来更香一点…</p><p>不过本身这个迭代加回调的场景，也确实是 JavaScript 应用更广泛一些。</p><p>既然经常在各种语言之间穿梭，那还是要对一些坑多了解点吧，不能总是搞出一些莫名其妙的问题 QAQ</p><p>之前听过一种说法，新学一门编程语言，主要学习语言特性和语法糖。现在看来，还需要加一项，就是语法坑。</p><p><del>以上。(?)</del></p><blockquote><p>UPD: 你把<code>let</code>换成<code>var</code>，还会这么想吗??</p><p>算了，就当没有这一节内容吧。<strong>我<em>一点</em>也没有<em>思考</em>过！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC Resolver 乱搞手册</title>
      <link href="/Resolve-a-Resolver/"/>
      <url>/Resolve-a-Resolver/</url>
      
        <content type="html"><![CDATA[<p><del>2020年了，为了 blog 不咕，还是要写点什么。</del></p><p>这是一个补档，记录了 2019 CUSTACM 校队选拔赛前为了校史上首次推出的滚榜活动做的准备。</p><p>不过说到为什么要做这个，其实都是一时兴起罢了。</p><p>该方案可以被广泛应用于各种 OJ 而不限于 DOMJudge 或 PC^2。我校的 CustOJ 就是基于 OnlineJudge 的。</p><h2 id="什么是-ICPC-Resolver"><a href="#什么是-ICPC-Resolver" class="headerlink" title="什么是 ICPC Resolver"></a>什么是 ICPC Resolver</h2><p>ICPC Resolver 是 ICPC Tools 中的一员，最初都是用于 ICPC World Finals 的。</p><p>如同它<a href="https://icpc.baylor.edu/icpctools/resolver/Resolver.pdf" target="_blank" rel="noopener external nofollow noreferrer">一万年不更新的文档</a>所说:</p><blockquote><p>The ICPC Resolver is a tool for graphical animation of contest results. It shows the final runs submitted</p><p>during a contest in an interesting way, and leads up to display of the award winners.</p></blockquote><p>ICPC Resolver 可以在比赛结束后，用于展示封榜时期内的比赛结果变化，也就是俗称的滚榜。</p><p>长期以来，在 *cpc 现场赛，滚榜都是一项传统艺能。不过也有的赛区因为各种原因不滚榜/滚不了榜，<del>令人发指(指省赛)</del>。</p><p>如果身为选手，观看滚榜是非常激动人心的，<strong>尤其是在铜铁/银铜/金银交界的区域，看到自己队名的时候</strong>。当然，作为万年铜首(<em>Cu</em>st)，我已经麻木了。<del>所以才有勇气直视 Resolver(雾)</del></p><h2 id="如何部署-ICPC-Resolver"><a href="#如何部署-ICPC-Resolver" class="headerlink" title="如何部署 ICPC Resolver"></a>如何部署 ICPC Resolver</h2><p>进入<a href="https://icpc.baylor.edu/icpctools/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>，点击<a href="https://icpc.baylor.edu/icpctools/resolver/resolver-2.0.1798.zip" target="_blank" rel="noopener external nofollow noreferrer">链接</a>，一键下载，解压运行，完成</p><blockquote><p>No~ No~ No~</p></blockquote><p>下载解压后你会发现，他连个能跑的 demo 都不给，这怎么整？</p><p>至于文档，乍一看运行方法倒是有很多，什么 Event Feed 啦，CDP/CDS 之类的，仔细阅读就会陷入递归读文档的深渊中。更过分的是，向前挖了几个<a href="https://pc2.ecs.csus.edu/pc2projects/build/allbuilds.php" target="_blank" rel="noopener external nofollow noreferrer">版本</a>，文档居然长得都几乎一毛一样。至少从文档上，并看不出历代 Resolver 的具体数据要求的区别。</p><p>而真实的 Resovler 文档，大概散落在 PC^2 文档里的某个角落。当然，PC^2 给的文档，只介绍了怎么把 PC^2 的数据喂给 Resolver。DOMJudge 大概也同理。</p><p>于是求助搜索引擎。根据我们的实际需求，排除了 CDP 的运行方式，最后参考了这篇博文里提供的数据。此处要感谢东北大学。</p><blockquote><p>题外话: 这个数据来自16沈阳站热身，记录了我的第一口大锅: 帮学长把一个最短路 sb 题读成了一个不可做题</p></blockquote><h2 id="如何正确运行-ICPC-Resolver"><a href="#如何正确运行-ICPC-Resolver" class="headerlink" title="如何正确运行 ICPC Resolver"></a>如何正确运行 ICPC Resolver</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>虽然有了数据，一开始也是跑不起来。根据 Exception 和凌乱的文档瞎猜了一些改法(比如把 run 改成 submission，跑是能跑起来了，不过跑起来是一个完全没有数据，只有队名的情况。中间略去许多的坑，得到的结论是: 使用了过高版本的 Resolver (干!)</p><p>枚举了数个过往的 dev 版本，最后确定了使用 1.1.0dev.1057。这个版本可以正确兼容目前手里的数据。</p><p>之后做的事情，其实是对网上下载来的数据做一个瘦身。不负责任的猜测，那份数据是 PC^2 自动生成的。再略去来回反复枚举参数的操作，最后得到了如下的结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">info</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>A Contest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">length</span>&gt;</span>05:00:00<span class="tag">&lt;/<span class="name">length</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scoreboard-freeze-length</span>&gt;</span>01:00:00<span class="tag">&lt;/<span class="name">scoreboard-freeze-length</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>20<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">info</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>121<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>队伍名称1<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>122<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>没有队<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>123<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>比速度<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>124<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>有情绪<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>125<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>好选拔<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>110.523<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">first-to-solve</span>&gt;</span>true<span class="tag">&lt;/<span class="name">first-to-solve</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>122<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>152.958<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>123<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>153.628<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>false<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>124<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>14556.691<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>false<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>125<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>4157.132<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>1<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>1180.523<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>winner<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Champion<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>122<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Not Gold Medalist<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>123<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>铁牌<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>125<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Silver Medalist - 银奖<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>124<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Bronze Medalist<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>first_to_solve<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>A题一血<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先是比赛的信息，标题、总时长、封榜时间、罚时信息是必要的。</p><p>之后是题目，每个题目给个<code>id</code>就行。</p><p>再之后是队伍信息，每个队伍有个<code>id</code>，而队伍名称用<code>university</code>代替，可能是因为那个版本的 Resolver 只滚学校名称(毕竟 World Finals)。</p><p>用<code>run</code>代表提交信息(这部分新版本已经完全不一样了)，每次提交有个<code>id</code>(使用整数类型，而不是 hash string)。<code>problem</code>和<code>team</code>代表该次提交哪支队伍了哪题，里面填的是对应的<code>id</code>，很好理解。<code>time</code>是从 0 开始以秒为单位的时间戳。<code>judged=true</code>是必要的，否则会抛异常。<code>solved</code>和<code>penalty</code>是两个属性，合在一起可以代表提交的结果。只有 Accepted 中的<code>solved=true</code>且<code>penalty=false</code>，其他都是提交不通过，<code>solved=false</code>。其中 Compilation Error 不计罚时，所以<code>penalty=false</code>，否则<code>penalty=true</code>。最后可能有<code>first-to-solve=true</code>的属性，代表该次提交是该题的一血提交。但是<strong>不需要</strong><code>first-to-solve=false</code>，切记。</p><p><code>award</code>代表奖项，这里需要人工颁下奖。<code>team</code>代表获奖队伍的<code>id</code>，<code>type</code>有<code>winner</code>、<code>medal</code>、<code>first_to_solve</code>三种，<code>citation</code>是获奖的详细介绍。一支队伍允许获三个<code>type</code>不同的奖。</p><h3 id="中文字体"><a href="#中文字体" class="headerlink" title="中文字体"></a>中文字体</h3><p>老外开发的软件，对中文支持不是很好(等于没有)。Resolver 默认使用的是 Helvetica，一个古老而经典的拉丁字母无衬线字体。</p><p>根据搜索引擎，据说支持通过设置环境变量<code>ICPC_FONT</code>来调整使用的字体，但实测没有效果。估计是高版本 Resolver 的 feature。</p><p>不过，通过解压<code>resolver.jar</code>包发现，字体是打包在里面的。只要将里面的字体替换成有中文的，就有办法支持中文。没有编码问题真是太感动了</p><p>原本的字体文件名叫<code>HELV.PFB</code>。<code>pfb</code>是一个古老的字体格式。将我们已有的字体(基本上都是<code>ttf</code>格式)通过<a href="https://convertio.co/zh/ttf-pfb/" target="_blank" rel="noopener external nofollow noreferrer">在线工具</a>转成<code>pfb</code>，并命名成<code>HELV.PFB</code>放在<code>font</code>文件夹下，之后通过以下命令即可将我们想要的字体注入进 jar 包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -uvf resolver.jar font</span><br></pre></td></tr></table></figure><p>略过一番折腾和反复重试(不是所有中文字体都很好地适配 Resolver，非常容易出现文字重叠/截断或其他奇奇怪怪的事情)，使用了自己的 Mac 里不知道哪里掏出来的<code>STHEITI.ttf</code>。这个字体看起来效果还 OK。</p><p>不过还是有问题。有一些特殊的字符，显示效果不好，比如提交信息中间的-(两边貌似有空格)。于是尝试组合字体。</p><p>随手找了一个合并字体文件的<a href="https://en.m.fontke.com/tool/mergefonts/" target="_blank" rel="noopener external nofollow noreferrer">在线工具</a>，将原本的<code>HELV.PFB</code>里的字体(需要先转成<code>ttf</code>)和<code>STHEITI.ttf</code>合并。</p><p>由于 Helvetica 有点古老，为了显示效果，使用 Right Join，即以<code>STHEITI.ttf</code>为主，没有的字符从<code>HELV.PFB</code>获取，得到的<code>mixed.ttf</code>转成<code>pfb</code>注入<code>resolver.jar</code></p><p>经过这样一番折腾，终于得到了可用的 Resolver。这里提供已经折腾完的版本 - <a href="https://github.com/custoj/Cust-Resolver" target="_blank" rel="noopener external nofollow noreferrer">Github</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>首先我们假设文档说的是真的。所以通过命令启动 Resolver。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./resolver.sh sample.xml</span><br></pre></td></tr></table></figure><p>我只验证了 fast 参数，是好用的，例如这样加速 10 倍滚榜</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./resolver.sh sample.xml --fast 0.1</span><br></pre></td></tr></table></figure><p>其他参数可能也是真的。以上命令适用于 Linux/MacOS，Windows 使用<code>resolver.bat</code>同理，毕竟是跨平台的 Java 项目。</p><p>另外，滚榜中的一些键盘操作，也可能是真的。反正按空格<strong>真的</strong>可以让它一直滚。</p><h2 id="如何在-CustOJ-上实装"><a href="#如何在-CustOJ-上实装" class="headerlink" title="如何在 CustOJ 上实装"></a>如何在 CustOJ 上实装</h2><p>其实有了 Resolver 所需的数据格式，剩下的只是大模拟而已。把 OJ 的题目和提交记录，通过字符串处理成所需的格式，然后再手动填一下谁获了奖，滚榜就算 ready 了。</p><blockquote><p>No~ No~ No~</p></blockquote><p>不知道怎么就从大模拟变成了一坨 SQL (大草</p><p>大概是有点懒得加接口专门搞这玩意，并且也不想写个爬虫(自己爬自己是怎么回事)再把数据 format 起来，所以最简单粗暴的方法当然是<del>~</del>操库！</p><p>有一说一，PostgreSQL 还是挺好操的。首先它原生支持查询结果以<code>xml</code>格式返回，这就方便了许多。对应的<a href="https://www.postgresql.org/docs/9.1/functions-xml.html" target="_blank" rel="noopener external nofollow noreferrer">命令</a>是<code>xmlforest</code>。其他 RDBMS 也同理，感觉基本都有。</p><p>之后就是写查询了。偶尔把逻辑写在 SQL，感觉也不错，反正上面也没有其他语言对接，直接就出结果了。</p><p>这里需要两条查询，一条查询所有的参赛队伍，还有一条查询所有的提交。当然比较流氓的写法就是两条查询<code>UNION ALL</code>起来，那搞一次就行了。</p><p>整句SQL写了不到20行，可以接受。为避免透露<del>人尽皆知的</del> CustOJ 表结构，这里就不放了。不过 Github Repo 里有这段 SQL。</p><p>查询的逻辑，按实际需求做就行，要注意的点大概有这几条</p><ul><li>筛选有提交的参赛队伍，以防滚榜从一堆鸽子开始</li><li>提交记录过滤掉验题的(如果有的话)</li><li>查一血的时候，不如多 join 一次，而不是嵌套查询</li></ul><p>对于 PostgreSQL 来说，查询结果保存在文件挺方便的，利用<code>\o</code>指令即可。</p><p>如果 DB 端口不对外开的话，这些查询可以在服务器上做，之后<code>scp</code>下来(什么? 没有<code>scp</code>?? OJ 平时都靠人肉运维吗???)</p><p>之后把结果贴进要 resolve 的<code>xml</code>文件就行。注意上面说的，<strong>不需要<code>first-to-solve=false</code></strong>。如果查询里避免不掉，可以批量替换成空串。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>虽然是后记，也是后得很后的后记了。</p><p>由于比赛举办时不在学校，所以滚榜由学弟代为操作了。我<del>远程操作了比赛结果</del>整理了滚榜数据。</p><p>感觉效果还行，让许多本校的、NENU/CCUT 没参加过现场赛的同学体会了滚榜这项 *cpc 传统艺能。据说整场比赛的办赛效果惊动了隔壁 NENU，引来无数大佬砸钱赞助他们的 ACM(?)。</p><p>另外，这套单独的滚榜方案显然没有 JLU - yanger 的全套 DOMJudge + ICPC Tools 来得完善。今年我校要办赛，首先是希望有滚榜吧，其次不要像去年 EC Final 一样因为技术原因把滚榜锅了。像这样的一套备用方案，也算有个底。</p><p>对了，首先的首先的首先，希望今年省赛有 Ubuntu!</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>造数据防锅指北</title>
      <link href="/how-to-generate-test-datas/"/>
      <url>/how-to-generate-test-datas/</url>
      
        <content type="html"><![CDATA[<p><del>什么？你还在用 C++ 出数据</del></p><p>在<del>ACM</del> <del>JB</del> *CPC 系列的比赛中，出题是非常关键的一环。作为出题人，题出得不好，就会被喷(?)。出题除了需要脑洞，还需要严谨的数据。如果数据错了/水了，后果就是出题人被选手吊起来打。</p><p>本人从大二上学期的新生选拔赛开始给学校的各类校赛(?)出题，也在现场/赛后踩了一些坑。因此总结一些出题(主要是造数据)的姿势，以供参考。</p><h2 id="早期的实践-错误示范"><a href="#早期的实践-错误示范" class="headerlink" title="早期的实践 - 错误示范"></a>早期的实践 - 错误示范</h2><p>一开始当然是 C++ 选手的沙雕操作: <code>rand</code>, <code>freopen</code>，然后再手动加几个很小很边界的人肉数据点 hack 一些能想到的沙雕写法。</p><p>这么搞很显然有弊端。首先是没法保证人肉数据点的正确性，就算是正确的，可能还是不够强。其次是麻烦，跑一把只能出一组数据，然后还要改<code>freopen</code>里的文件名。<del>于是导致了数据只有一组</del></p><p>此外，当时还是个 Windows 用户。众所周知，<code>rand</code>生成的随机数最大值<code>RAND_MAX</code>是 library-dependent 的，在 Windows(MinGW) 下是 32767，因此跑不出比较大的随机数。</p><p>那个时候虽然知道这个 feature，但是解决方法比较沙雕: <code>rand()*rand()</code>。这显然变成了一个分布不均匀的随机，例如 19260817 出现的概率为 0。其实更好的解决方法是<code>(rand()&lt;&lt;16)+rand()</code>，不过总的来说使用 C++ 出数据是不推荐的做法。</p><p>当然，有一个场景必须要这么做——省赛(及其他现场赛 Windows 环境或没有 Python 的情况下)需要对拍的时候。这个时候，建议使用<code>mt19937</code>，还是比较方便的，起码不用考虑<code>rand</code>大小的问题。这也说明，出数据不一定是为了出题，可能还是为了过题。</p><p>题外话，从主办方的角度来说，现场赛使用 Windows 环境可能是为了萌新友好，不过个人还是希望明年我们办省赛的时候给选手们提供 Ubuntu 的标准现场赛环境(来自 Vim &amp; Python 重度依赖患者的 flag?)</p><h2 id="比较标准的姿势-大概"><a href="#比较标准的姿势-大概" class="headerlink" title="比较标准的姿势(大概)"></a>比较标准的姿势(大概)</h2><p>发现 C++ 不好用的时候，接下来基本上就会想到 Python。随机数据<code>import random</code>一把梭，并且还有方便的列表操作 api。接下来以今年校内 C4 选拔赛原题<a href="http://oj.cust.edu.cn/problem/141" target="_blank" rel="noopener external nofollow noreferrer">tr</a>为例，说明一个大致的出题流程。</p><p>首先是准备数据生成器，我这边一般命名为<code>gen.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">s=<span class="string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890/. "</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(random.randint(<span class="number">1</span>,<span class="number">100</span>)):</span><br><span class="line">  print(<span class="string">''</span>.join([random.choice(s)<span class="keyword">for</span> j <span class="keyword">in</span> range(random.randint(<span class="number">1</span>,<span class="number">100</span>))]))</span><br></pre></td></tr></table></figure><p>然后是用来读输入跑输出的程序，一般是标程，不过这题其实出得挺偷懒的，标程<code>work.sh</code>如下。<del>显然这题的标题就是这么来的</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">tr A-Z a-z</span><br></pre></td></tr></table></figure><p>之后拿脚本<code>gen.sh</code>批量产出输入输出数据，比如搞个五组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=5;i++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">python3 gen.py &gt; <span class="variable">$i</span>.<span class="keyword">in</span></span><br><span class="line">./work.sh &lt;<span class="variable">$i</span>.<span class="keyword">in</span> &gt;<span class="variable">$i</span>.out</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>至此，我们当前目录下会有三个文件: <code>gen.py</code>, <code>work.sh</code>, <code>gen.sh</code>。当然这个<code>work.sh</code>纯属偷懒产物，一般的话还是好好拿 C++ 什么的写标程，然后编译得到可执行文件，比如<code>g++ work.cpp -o work</code>，然后上述<code>gen.sh</code>内的<code>work.sh</code>也相应改成可执行文件<code>work</code>。<strong>注意，这里的标程和数据生成器都不需要文件输入输出，直接走标准输入输出就好了。</strong></p><p>基本的三件套到位，就可以在终端跑了。这里首先要加一波执行的权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x work.sh  <span class="comment"># 偷懒产物，可忽略</span></span><br><span class="line">$ chmod +x gen.sh</span><br></pre></td></tr></table></figure><p>然后执行脚本，大功告成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gen.sh</span><br></pre></td></tr></table></figure><p>对于像校内 C4 选拔赛这样的需要 OI 赛制的，也可以微调一下<code>gen.py</code>，比如这题把空格去掉再跑一把形成另一批输入数据，酌情放点部分分给选手。此处就不再赘述了。</p><h2 id="后来的偷懒方法"><a href="#后来的偷懒方法" class="headerlink" title="后来的偷懒方法"></a>后来的偷懒方法</h2><p>之后的好几场比赛，都是组的比较急，有的时候是比赛还有一周开始，但是我们还是一个题都没出的状态。所以就有了一种又快又不容易出锅的偷懒方法——利用好 Special Judge</p><p>目前，我校的 oj，如果题目是 spj 的，数据只需要提供<code>.in</code>文件，之后额外提供 spj 代码即可。显然，输出数据有没有出锅，肉眼还是比较难看出来的，但是 spj 代码就比较容易 review。出数据的流程和之前几乎没什么区别，去掉<code>work</code>的部分就可以了。这就意味着，标程有的时候就不需要写了(?)，例如<a href="http://oj.cust.edu.cn/problem/100" target="_blank" rel="noopener external nofollow noreferrer">玄学</a>、<a href="http://oj.cust.edu.cn/problem/125" target="_blank" rel="noopener external nofollow noreferrer">BA</a>、<a href="http://oj.cust.edu.cn/problem/161" target="_blank" rel="noopener external nofollow noreferrer">Arithmetic Sequence</a>，就都是这么来的。</p><p>出题人自验的过程，也就是看一下 spj 代码有没有肉眼可见的 bug，不需要担心输出数据和输入数据是不是对不上了。<del>之后丢给人验题，能过就行了</del></p><p>至于什么是肉眼可见的 bug，只能靠经验自由发挥了。以下举两个例子</p><p>之前现场出过的一个锅是，题目给 n、m 和长度为 m 的一个数组 a，spj 大概要判一个长度为 x(选手给出)的数组 b 是否满足$∑b_{a_i}$可以被 n 整除。当时有选手提交的代码就是只输出了一个 0，结果 spj 返回 Accepted。原因是 spj 虽然判了 x 是否比 m 大，但是没判 x 是否$\le 0$。至于现场修锅，比较曲折，大概是线上改库把人家的 Accepted 退回，题数<code>--</code>，手算一下去掉这题的罚时，然后再去通知人家。</p><p>还有一个锅，是在比赛结束后发现的，因为没有选手成功触发。这个问题首先其实和出题流程没有什么太大关系，是题目需要输出小数，根据精度判断是否正确。然后发现如果输出是<code>NaN</code>，spj 返回 Accepted。这种问题其实就比较状况外了，然后查之前的题有没有相同的问题，也是有些题有有些题没有。不过还是建议以后这种情况先用<code>std::isnan</code>判一下</p><p>总之，这种偷懒的方法还需要比较完善的 review 流程<del>需要用ctf选手的目光去审计spj代码</del>，可以在熟悉的情况下适当使用，正常情况下还是用上一部分所述的方法造数据。</p><h2 id="附录1-如何把custoj上的题搬运到牛客"><a href="#附录1-如何把custoj上的题搬运到牛客" class="headerlink" title="附录1 如何把custoj上的题搬运到牛客"></a>附录1 如何把custoj上的题搬运到牛客</h2><p>貌似上次留了这个flag，补档。挂题要用的牛客号在我这，有需要可以联系我，或者直接找牛客重置。</p><p>搬运题面的时候，可能会涉及到 latex 公式。因为我们出题一般都是 markdown 格式内嵌 latex，所以就直接点插入公式，粘贴全部的 markdown，再微调格式即可。</p><p>数据分为两种。没有 spj 的，直接搬过去就行了。有 spj 的，首先要新建<strong>对应数量的<code>.out</code>文件</strong>，内容随意，spj 不用到就行。之后修改 spj 代码，按牛客的要求将文件名写死。一般的具体做法是把 spj 代码中 main 里以下代码块(一般从18行起)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: spj x.in x.out\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">input = fopen(args[<span class="number">1</span>], <span class="string">"r"</span>);</span><br><span class="line">user_output = fopen(args[<span class="number">2</span>], <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input = fopen(<span class="string">"input"</span>, <span class="string">"r"</span>);</span><br><span class="line">user_output = fopen(<span class="string">"user_output"</span>, <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p>这样就能很方便地把 custoj 里的题目搬运到牛客上了。办个重现赛什么的还是很方便的</p><h2 id="附录2"><a href="#附录2" class="headerlink" title="附录2"></a>附录2</h2><p><del>贵校什么时候考虑接入polygon啊</del></p><p><del>贵校什么时候校赛考虑用DomJudge啊</del></p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近一季度</title>
      <link href="/2019-4-6/"/>
      <url>/2019-4-6/</url>
      
        <content type="html"><![CDATA[<p><strong>本篇文章的部分内容被一些不怀好意的人员曲解、利用，暂不显示。</strong>祝他们不会因为「不会 xx」而被「换一个 npy」。</p><p>至于原文？那总是存在于互联网中的某处的。</p><p><em>Thank you ALL</em></p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces - April Fools Day Contest 2019</title>
      <link href="/Codeforces-April-Fools-Day-Contest-2019/"/>
      <url>/Codeforces-April-Fools-Day-Contest-2019/</url>
      
        <content type="html"><![CDATA[<p>一年只有两场 cf，一场 Goodbye，一场 April Fools Day Contest。</p><p>年年 B 题都有毒，去年摸猫，今年暴力窃取输入数据。</p><p>青名大佬<code>kit1980</code>今年又回来出愚人节了，感觉题目质量还是比去年高的。虽然他出的题好像没什么人做出来。</p><h2 id="A-Thanos-Sort"><a href="#A-Thanos-Sort" class="headerlink" title="A. Thanos Sort"></a>A. Thanos Sort</h2><p>Upsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/A" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>签到题。灭霸排序，每次将数组的前一半或后一半移除，直到数组有序为止。问可能的灭霸排序后数组的最长长度。</p><p>这题一点也不 April Fool，比赛时直接跳了。怎么做都能过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sor</span><span class="params">(x)</span>:</span></span><br><span class="line">  t=x[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">if</span> t&gt;i:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    t=i</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">input()</span><br><span class="line">x=list(map(int,input().split()))</span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  l=<span class="number">1</span>&lt;&lt;i</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(x)-l+<span class="number">1</span>,l):</span><br><span class="line">    <span class="keyword">if</span> sor(x[j:j+l]):</span><br><span class="line">      ans=max(ans,l)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="B-Kanban-Numbers"><a href="#B-Kanban-Numbers" class="headerlink" title="B. Kanban Numbers"></a>B. Kanban Numbers</h2><p>Solved. 01:14 (+104)</p><p><a href="https://codeforces.com/contest/1145/problem/B" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>为什么交了这么多发？</p><blockquote><p>大概是二分了每一个输入的输出</p></blockquote><p>比赛时候不知道啥是“看板”(Kanban)，头铁怼这个题，过了以后已经头昏眼花了。过的时候依然不知道什么是“看板”。</p><p>正解: Kan <strong>Ban</strong> Numbers, 即英语拼写时不出现 k、a、n 字母的数。</p><p>？？？我是怎么过的这题</p><p>数据除了样例全是升序，大概是吃了这个好处吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">  <span class="keyword">if</span> (x==<span class="number">5</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">13</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">24</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">46</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">4</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">10</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">11</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">12</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">16</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">20</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">28</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">30</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">35</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">37</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">41</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">43</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">49</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">70</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">75</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">90</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">99</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">99</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Mystery-Circuit"><a href="#C-Mystery-Circuit" class="headerlink" title="C. Mystery Circuit"></a>C. Mystery Circuit</h2><p>Upsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/C" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>出题人 Nickolas 同时是 Microsoft Q# Coding Contest 的出题人。看到这个电路图，想到量子门。</p><p>查了 wiki，从左到右分别是<code>NOT</code>门、<code>Controlled NOT</code>门、<code>Toffoli</code>门。第四个不知道是什么，猜了一下应该和前两个类似，若下面三条线路都是<code>1</code>，第四条线路取反，否则不变。</p><p>比赛时手玩样例失败了，感觉前年也是少一道电路题？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">  <span class="keyword">int</span> a=x&amp;<span class="number">8</span>,b=x&amp;<span class="number">4</span>,c=x&amp;<span class="number">2</span>,d=x&amp;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> A=a^<span class="number">8</span>,B=(A&gt;&gt;<span class="number">1</span>)^b,C=((A&gt;&gt;<span class="number">2</span>)&amp;(B&gt;&gt;<span class="number">1</span>))^c,D=((A&gt;&gt;<span class="number">3</span>)&amp;(B&gt;&gt;<span class="number">2</span>)&amp;(C&gt;&gt;<span class="number">1</span>))^d;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;A+B+C+D&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Pigeon-d’Or"><a href="#D-Pigeon-d’Or" class="headerlink" title="D. Pigeon d’Or"></a>D. Pigeon d’Or</h2><p>Solved. 01:54 (+2)</p><p><a href="https://codeforces.com/contest/1145/problem/D" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>题面很多拼写错误。英语水平不好，贴到 Word 里看看哪些单词错了啥。</p><p>发现错的字母连起来是有含义的: f<strong>t</strong>ying, sani<strong>w</strong>ation, tr<strong>o</strong>nsform -&gt; two</p><p>连起来以后的结果是: two plus xor of third and min elements</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input()</span><br><span class="line">a=list(map(int,input().split()))</span><br><span class="line">print(<span class="number">2</span>+(a[<span class="number">2</span>]^min(a)))</span><br></pre></td></tr></table></figure><h2 id="E-Fourier-Doodles"><a href="#E-Fourier-Doodles" class="headerlink" title="E. Fourier Doodles"></a>E. Fourier Doodles</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/E" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><h2 id="F-Neat-Words"><a href="#F-Neat-Words" class="headerlink" title="F. Neat Words"></a>F. Neat Words</h2><p>Solved. 01:43 (+)</p><p><a href="https://codeforces.com/contest/1145/problem/F" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><blockquote><p><strong>neat</strong> (<em>adj.</em>): ②(well presented) 工整的 gōngzhěng de ‹handwriting, stitching› (来自英汉词典)</p></blockquote><p>观察样例，<code>NEAT</code>、<code>AI</code>、<code>JUROR</code>，写出来要不全都是直线，要不每个字母都带曲线。</p><p>于是得到题意: 求一个单词的每个字母是否全都是直的/全都带曲线的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n=input()</span><br><span class="line">s=<span class="string">'AEFHIKLMNTVWXYZ'</span></span><br><span class="line">t=<span class="string">'BCDGJOPQRSU'</span></span><br><span class="line">f1=<span class="number">0</span></span><br><span class="line">f2=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> n:f1=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> n:f2=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> f1+f2==<span class="number">1</span>:print(<span class="string">'YES'</span>)</span><br><span class="line"><span class="keyword">else</span>:print(<span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure><h2 id="G-AI-Takeover"><a href="#G-AI-Takeover" class="headerlink" title="G. AI Takeover"></a>G. AI Takeover</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/G" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> April Fools Day </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>*cpc现场赛vim配置</title>
      <link href="/cpc-vimrc/"/>
      <url>/cpc-vimrc/</url>
      
        <content type="html"><![CDATA[<p>现场赛 vim 配置，仅 <strong>12</strong> 行，配置只需 <strong>1</strong> 分钟！</p><p>普通 vim 玩家也能应付平时使用</p><h2 id="为什么用-vim"><a href="#为什么用-vim" class="headerlink" title="为什么用 vim?"></a>为什么用 vim?</h2><p>我用 vim，基于以下几个原因</p><ul><li>axp 学长推荐 (axpnb!)</li><li>现场赛使用的系统基本都是<code>Ubuntu</code>，基本都提供了<code>vim</code></li><li>遇到过很多现场赛有人反映/队友亲测 CodeBlocks 崩溃/卡顿，vim 稳定性杰出</li><li>提高<code>Linux</code>姿势，遇到只有系统自带记事本的环境也不虚 (x</li><li>快速编辑，例如我常用的<code>*dd</code>/<code>*yy</code>和<code>p</code>组合技</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>首先用<code>vim</code>创建并编辑<code>.vimrc</code>文件 (完整路径<code>~/.vimrc</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><p><code>.vimrc</code>本体</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>                                      <span class="comment">" 高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span>                                         <span class="comment">" 行号</span></span><br><span class="line"><span class="keyword">set</span> smarttab                                   <span class="comment">" tab长度适配</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                                  <span class="comment">" tab长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>                               <span class="comment">" 自动补齐的tab长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span>                                    <span class="comment">" 缩进</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span>                                    <span class="comment">" 鼠标定位</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F9&gt;</span> :<span class="keyword">call</span> CR()<span class="symbol">&lt;CR&gt;</span>                        <span class="comment">" 一键编译运行</span></span><br><span class="line">func! CR()                                     <span class="comment">" 编译运行函数</span></span><br><span class="line">    exec <span class="string">"w"</span>                                   <span class="comment">" 保存文件</span></span><br><span class="line">    exec <span class="string">"!g++ -O2 -std=c++11 % -o %&lt; &amp;&amp; ./%&lt;"</span> <span class="comment">" g++编译命令，开O2优化和c++11</span></span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure><h2 id="一些啰嗦"><a href="#一些啰嗦" class="headerlink" title="一些啰嗦"></a>一些啰嗦</h2><p>七行配置，五行编译。</p><p>显示相关两行，tab 相关三行，顺便缩进。</p><p>不要鼠标定位也可以，熟练使用<code>hjkl</code>移动。</p><p>写快捷键映射的时候，不知道哪里打空格，就每隔一个词打一个。</p><p><code>%</code>是当前文件名，<code>%&lt;</code>是去后缀的当前文件名。熟练使用<code>g++</code>，想要怎么编译倒回去代入即可。然后<code>&amp;&amp; ./%&lt;</code>执行编译输出的可执行文件。</p><h2 id="扩展-一键复制"><a href="#扩展-一键复制" class="headerlink" title="扩展: 一键复制"></a>扩展: 一键复制</h2><p>有些比赛需要复制代码到网页提交。以下介绍如何复制全部代码。</p><p>在 vim 里操作，<strong>一般模式</strong>(按 esc 以后)键入<code>gg</code>(区分大小写)，跳转到第一行。</p><p>键入<code>V</code>进入可视模式 (按行选中)</p><p>键入<code>G</code>跳转到最后一行</p><p>键入<code>&quot;+y</code>将选中内容复制到剪贴板</p><p>写成一句话加在<code>.vimrc</code>后面，就是</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-A&gt;</span> : ggVG<span class="comment">"+y</span></span><br></pre></td></tr></table></figure><h2 id="扩展-Python"><a href="#扩展-Python" class="headerlink" title="扩展: Python"></a>扩展: Python</h2><p>利用<code>&amp;filetype</code>判断文件类型，使用不同的指令</p><p>一般比赛想用<code>python3.x</code>的话，3 是需要写的。手抖忘写，python 报错，队友两行泪。</p><p><code>.vimrc</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> smarttab</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F9&gt;</span> :<span class="keyword">call</span> CR()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line">func! CR()</span><br><span class="line">    exec <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">if</span> &amp;<span class="keyword">filetype</span>==<span class="string">'cpp'</span></span><br><span class="line">        exec <span class="string">"!g++ -O2 -std=c++11 % -o %&lt; &amp;&amp; ./%&lt;"</span></span><br><span class="line">    <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span>==<span class="string">'python'</span></span><br><span class="line">        exec <span class="string">"!python3 %"</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure><h2 id="6-12-2019补充"><a href="#6-12-2019补充" class="headerlink" title="6/12/2019补充"></a>6/12/2019补充</h2><p>前几天上班配<code>.ideavimrc</code>时候发现的配置，和 WorldFinal 直播时看到的效果如出一辙，特此记录：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> relativenumber</span><br></pre></td></tr></table></figure><p>用于显示相对行号，方便<code>j</code>、<code>yy</code>、<code>dd</code>等操作</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kickstart 2019 A - Parcels</title>
      <link href="/kickstart-2019-A-Parcels/"/>
      <url>/kickstart-2019-A-Parcels/</url>
      
        <content type="html"><![CDATA[<p>起晚了，第一轮 Kickstart 没打上，补一下第二题。</p><p>入土选手码力下降，TvT 咕鸽还是强啊</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e01/000000000006987d" target="_blank" rel="noopener external nofollow noreferrer">Parcels (Round A - Kick Start 2019)</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个$n×m$的<code>01</code>字符地图，<code>1</code>代表邮局，<code>0</code>代表空地。现在可以增加至多一个邮局，使得所有空白点到最近邮局曼哈顿距离最大值最小。求这个最小值<code>k</code>。</p><p>有$T$组输入，$T\le 100$，$n,m\le 250$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先特判答案$k=0$的情况，即地图中<code>1</code>的个数$\ge n×m−1$<br>将题意转化，求最小的<code>k</code>，每一个邮局覆盖距其<code>k</code>个曼哈顿距离以内的所有点，之后再加一个邮局可以使得地图被完全覆盖。</p><p>显然这个邮局是不加白不加的。考虑从<code>1</code>枚举最小值<code>k</code>，每枚举一次用 BFS 在地图上拓展每一个邮局的覆盖范围。此处的 BFS 初始时将所有邮局坐标入队，地图上的一个点不会二次入队。</p><p>然后判断剩余的未被覆盖的点是否可以找到一个点，到这个点的距离都$\le k$。如果找得到，那当前枚举到的<code>k</code>就是答案。</p><p>暴力地判断上述是否可以问题，需要枚举地图每个点和每个未覆盖点，复杂度$O(n^2m^2)$，但是未被覆盖的点有一大部分是不需要判断的。</p><p>想到只需选取离未被覆盖的点集中心最远的那部分点判断即可。此处的结论是，只需要判断未被覆盖的点集中横坐标和纵坐标<strong>和/差</strong>取到<strong>最大/最小值</strong>的点即可。最远的点数量是个常数，因此复杂度降为$O(nm)$。</p><p>最后复杂度$O(Tnm×玄学)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">255</span>][<span class="number">255</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T,kase=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">  <span class="keyword">for</span> (kase=<span class="number">1</span>;kase&lt;=T;kase++)&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        <span class="keyword">if</span> (a[i][j]==<span class="string">'1'</span>)q.push(&#123;i,j&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (q.size()&gt;=n*m<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;;k++)&#123;</span><br><span class="line">      <span class="keyword">int</span> len=q.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> ii=<span class="number">0</span>;ii&lt;len;ii++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> tx=t.first+d[i][<span class="number">0</span>],ty=t.second+d[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (tx&gt;=<span class="number">0</span>&amp;&amp;ty&gt;=<span class="number">0</span>&amp;&amp;tx&lt;n&amp;&amp;ty&lt;m&amp;&amp;a[tx][ty]!=<span class="string">'1'</span>)&#123;</span><br><span class="line">            a[tx][ty]=<span class="string">'1'</span>;</span><br><span class="line">            q.push(&#123;tx,ty&#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ax,ay;</span><br><span class="line">      <span class="keyword">int</span> maxp=<span class="number">-1e9</span>,maxm=<span class="number">-1e9</span>,minp=<span class="number">1e9</span>,minm=<span class="number">1e9</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">          <span class="keyword">if</span> (a[i][j]!=<span class="string">'1'</span>)&#123;</span><br><span class="line">            ax.push_back(i),ay.push_back(j);</span><br><span class="line">            maxp=max(maxp,i+j);</span><br><span class="line">            minp=min(minp,i+j);</span><br><span class="line">            maxm=max(maxm,i-j);</span><br><span class="line">            minm=min(minm,i-j);</span><br><span class="line">          &#125;</span><br><span class="line">      <span class="keyword">if</span> (ax.empty())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;mx,my;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ax.size();i++)</span><br><span class="line">        <span class="keyword">if</span> (ax[i]+ay[i]==maxp||ax[i]+ay[i]==minp||</span><br><span class="line">            ax[i]-ay[i]==maxm||ax[i]-ay[i]==minm)</span><br><span class="line">            mx.push_back(ax[i]),my.push_back(ay[i]);</span><br><span class="line">      <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> xi=<span class="number">0</span>;xi&lt;n;xi++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> yi=<span class="number">0</span>;yi&lt;m;yi++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> ff=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mx.size();j++)</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">abs</span>(xi-mx[j])+<span class="built_in">abs</span>(yi-my[j])&gt;k)&#123;</span><br><span class="line">            ff=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ff)&#123;</span><br><span class="line">          f=<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (f)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 码力 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CustOJ开发指北</title>
      <link href="/custoj-deploy/"/>
      <url>/custoj-deploy/</url>
      
        <content type="html"><![CDATA[<p><strong>最近对CustOJ的代码结构做了调整，并且在Github成立了Organization，把repo都搬到那个里面去了，因此本文暂时Deprecated，有空再补。</strong></p><p>UPD: 公网访问被切了，无限期鸽子中</p>]]></content>
      
      
      <categories>
          
          <category> ops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开坑纪念</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>新开博客，特此纪念【该来的总是要来的系列?</p><h2 id="为什么之前没有？"><a href="#为什么之前没有？" class="headerlink" title="为什么之前没有？"></a>为什么之前没有？</h2><p>真实: 语文水平太菜了，好像写不出什么</p><p>更真实: 由于菜，没有什么有含量的东西可以写</p><h2 id="后来呢"><a href="#后来呢" class="headerlink" title="后来呢?"></a>后来呢?</h2><p><del>老年人健忘日渐严重</del></p><p>即将失学，也许应该用什么东西装点一下平淡的简历</p><p>要去Bytedance Camp，好像有点东西可以写了？</p><p>那就趁寒假搞一个博客吧</p><h2 id="为什么咕了"><a href="#为什么咕了" class="headerlink" title="为什么咕了?"></a>为什么咕了?</h2><p>其实这个博客的坑寒假已经开好了，然而把整套算是配置好的博客丢在了家里的电脑，于是咕了</p><p>然后开学、做简历、投简历、面试……</p><p>为什么又不咕了?<br>拿到了实习offer以后日渐咸鱼</p><p>计划把一些我手上的锅提前丢给学弟们，需要找个地方写一些教程</p><h2 id="后来呢-1"><a href="#后来呢-1" class="headerlink" title="后来呢?"></a>后来呢?</h2><p>可能以后还是要咕的</p><p>To Be Continued.</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
