<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>灾后重建</title>
      <link href="/recover-log/"/>
      <url>/recover-log/</url>
      
        <content type="html"><![CDATA[<p>2020 年 4 月 2 日，我的个人电脑(MacBook Pro 13-inch, 2018)遭到了不可逆转的毁灭性打击，损失严重，特此记录。</p><p>由于博客也是灾后重建的一部分，之后又花了一些时间完成毕业设计，因此晚了三个月才写下这篇文章。</p><h2 id="损坏与修复"><a href="#损坏与修复" class="headerlink" title="损坏与修复"></a>损坏与修复</h2><p>首先来捋一下时间线。</p><ul><li>目测 4 月 1 日凌晨触发了一次系统更新，因此当我2日打开电脑时指纹登录被停用，需要我输入密码。</li><li>2 日晚上一边使用网易云音乐，一边使用 Sidecar 功能连接 iPad 做第二屏幕，之后突然就卡住了。于是强制关机。<ul><li>18 年的 mbp 有个通病，总会突然卡住然后重启，和 Apple T2 安全芯片有关。</li><li>我遇到过几次上述问题，尤其是刚拿到手那段时间。但是每一次都有网易云音乐正在播放，可能有毒…</li><li>这次尤为严重，卡住后不能重启了</li><li>系统版本应该是 macOS Catalina 10.15.4</li></ul></li><li>关机后尝试马上开机，没有任何反应。抱着一丝希望等它恢复到可以启动的状态，于是去洗澡了。然而等到机身都冰凉了，还是没有任何响应。</li><li>通过搜索引擎，尝试了几种常见的 Mac 开机无响应的解决办法，无果。遂访问 Genius Bar，预约了第二天的电话支持和周末的现场支持。</li><li>3 日电话支持，大部分依然是前一天查到的操作，似乎也尝试了一个没看到过的办法，但依旧无果。感觉时间拖得越长，对这种能自己操作的办法越不抱希望，预感到拆机是不可避免的了。</li><li>4 日直奔附近的 Apple Store，跟店员说了大概的情况(包括常用方法已经尝试无果)，几分钟就交机了，结论是直接换主板，主板含存储盘，数据不保证能挽救。</li><li>11 日中午 Apple Store 来电通知数据不可恢复，傍晚通知可以取机，于是第一时间前往，取回更换主板后的「新机」。</li></ul><p>从损坏到修复，一共过去 10 天。维修效率还是比较符合预期的。但是损坏这件事情本身就完全是预期外的。进一步询问维修人员，也只是表示主板出这种问题几率很小(个人推断还是 T2 芯片直接把主板整个锁死了)</p><p>于是偶尔考虑了下离开生态，毕竟 Mac 也没有很可靠嘛。然而并过不去<code>⌘</code>键和<code>⌃</code>键合并的坎。已经习惯了<code>ctrl:nocaps</code>的键位，有个<code>⌘Command</code>键对我来说是十分重要了(<code>⌃Control</code>键就应该干 control 的事情嘛)。不过不得不说，除了这个键盘问题，其他方面 M$ Windows 做得已经日趋完善了。</p><p><img src= "/img/loading.gif" data-src="/images/geniusbar.jpg" alt="Genius Bar 工作授权"></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>在损坏之前，我并没有很重视数据的备份。所以是真的很痛。</p><p>幸好，还是有一部分数据可以立马找回来的。主要分别是</p><ul><li>GitHub 上的代码，例如 CustOJ、CustIDE 等</li><li>阿里云上部署的代码，例如 CustReg、高德地铁路线爬虫脚本</li><li>百度网盘，保存了两个收钱做的外包项目、JoblabX的参赛代码等</li><li>公司的 Mac 和开发机里，终端配置和<code>.zshrc</code>、<code>.vimrc</code></li></ul><p>丢失的主要有</p><ul><li>毕设开题报告，虽然上交给老师了，但刚好老师的电脑被他老婆格式化了…</li><li>为了毕设找的一些参考文献，有些公网不好找的还是只能麻烦女票再下一份</li><li><strong>本 Blog 的部署源码</strong>，毕竟 GitHub Page 只托管静态产物</li><li>ACM 模板，源码和产物都丢失了（虽然也退役了</li><li>个人简历的 tex 源码，现在只有 pdf 留在 Google Drive 上了</li><li>一些出题用到的代码和数据</li><li>一些 pyspark 脚本</li><li>各种杂物，主要集中在以前的<code>~/</code>里</li></ul><p>当然，还有很多软件要装。主要麻烦的可能是一些 Adobe，以及 Wolfram Mathematica。不过最近 Wolfram Cloud 免费大放送，暂时先用着。</p><p>由于 4 月刚好是毕设中期，所以抓紧先重写了开题报告(幸好当时还没有真正开始写毕设，否则可能还没 git 过就 gg)</p><p>至于博客，则是到了最近才开始着手重建。这次干脆就从老的 Next Theme 换成了新的 Butterfly，多了许多功能和特效，然而也吃图。</p><h2 id="过渡的设备"><a href="#过渡的设备" class="headerlink" title="过渡的设备"></a>过渡的设备</h2><p>事实上我有两台💻，但是公司发的 15-inch 实在是太重了，并不想背来背去，而且新买的 iPad 当然要体验一下。于是 iPad 就当了几天家用主力机。</p><p>我购入的是 iPad Pro 2020 11” Wifi 版，几乎是国内最早一批拿到手的。当然当时还没有发售「悬浮」的 Magic Keyboard，临时用一把 Logitech k380 顶着，没有触控板也没有鼠标。</p><p>买它的时候，我确实被「你的下一台电脑，何必是电脑。」的广告语吸引住了。没想到一语成谶，直接把 mbp 搞挂来使得 iPad 替代「电脑」的位置…(具体的使用体验，可能将来会开一篇文章分享)</p><p>不过，在那几天，iPad 确实表现还是比较出色的。至少，我使用它和自己写的 CustIDE 通过了 Google Code Jam 的初赛，还通过带有 ssh 功能的 app 在云主机上做了一些小修改和运维。不过，很大一部分时间，是用浏览器来调研网盘了。</p><h2 id="备份方案"><a href="#备份方案" class="headerlink" title="备份方案"></a>备份方案</h2><p>数据备份确实很重要的，可能只有翻过车才能意识到。</p><p>这次拿到全新系统后，首先是确认了 iCloud 处于启用状态。iCloud 在生态内还是很好用的，桌面、文稿等几个位置都可以自动同步到云上，也可以跨设备同步小文件什么的。当然，网盘的使用也要考虑到非的设备。</p><p>各方面考虑下来(具体怎么考虑的已经忘了，有空想起来再补吧)，最后选择了 M$ 家的 OneDrive 做数据备份和同步。因为买的是 365，所以还享受到了正版的 Office 三件套，在毕设的论文撰写和答辩中还是起到了很大作用的，感觉不亏。之后文档备份，如果使用 Word 之类的，可以直接建到 OneDrive 里，所有设备都可以同步。</p><p>OneDrive 在 Mac 是可以映射成一个文件夹来使用的(Windows 貌似是挂盘，本质上同理)。我把这个文件夹直接放在<code>~/</code>下了。它支持软连接出来，映射到本机的其他路径下，但反过来不行。于是像博客源码这一类的，我会先在 OneDrive 建立好路径，然后<code>ln -s</code>到<code>~/blog</code>，这样在本机操作<code>blog</code>目录就直接同步到 OneDrive 了。</p><p>另一方面，如上所述，我习惯放很多杂物在<code>~/</code>里。这些东西我也是需要备份的，但是显然做不到实时。于是基于<code>rsync</code>写了个脚本，来支持<code>~/</code>下单文件的准实时同步，用<code>crontab</code>实现每 10 分钟同步一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sync_home.sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">src_dir=<span class="string">"<span class="variable">$HOME</span>/"</span></span><br><span class="line">dest_dir=<span class="string">"<span class="variable">$HOME</span>/OneDrive/ccw/"</span></span><br><span class="line"></span><br><span class="line">rsync -a --delete --exclude=<span class="string">'*/'</span> <span class="variable">$src_dir</span> <span class="variable">$dest_dir</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">*/10 * * * * ~/sync_home.sh</span><br></pre></td></tr></table></figure><p>能解决<code>~/</code>里的杂物，其实就解决了很大一部分问题。其他成库的代码，都会被传到 GitHub(微软接手后放开了私有仓库的限制，好好利用)。</p><p>总结，我可能又要成为软吹了【</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Lambda 的坑 - Late Binding</title>
      <link href="/python-lambda-late-binding/"/>
      <url>/python-lambda-late-binding/</url>
      
        <content type="html"><![CDATA[<p>(第一次?)遇到了 Python 里的坑，特此记录。</p><p>Python 的 lambda 表达式是一坨〇，确实。</p><h2 id="翻车现场"><a href="#翻车现场" class="headerlink" title="翻车现场"></a>翻车现场</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    l.append(<span class="keyword">lambda</span>: print(i))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>以上代码是从业务逻辑中抽取的，已脱敏。大概的含义就是，分别把一个输出 0 的函数、输出 1 的函数、输出 2 的函数依次放到一个 list 里面。这个 list 可能是一个回调列表，或者会被遍历调用，whatever。对这个 list 里面的内容，唯一的要求就是，可以被无参数地调用(Python 里大概也算一种类型 - <code>callable</code>)。</p><p>首先按照正常人的逻辑思考，这段代码预期应该输出 0。那我们来运行一下，之后神奇的事情发生了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 1.py</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>我们看到，最终结果居然输出了 2。有点迷惑，但大概能想到因为<code>l[0]</code>调用时应该确实有<code>i=2</code>。</p><h2 id="和魔鬼作斗争"><a href="#和魔鬼作斗争" class="headerlink" title="和魔鬼作斗争"></a>和魔鬼作斗争</h2><p>不管是什么原因，解决问题才是第一要义。于是有了第二段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line">list(map(<span class="keyword">lambda</span> x: l.append(<span class="keyword">lambda</span>: print(x)), range(<span class="number">3</span>)))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>大概的思路就是，既然<code>i</code>影响了我们的调用，那我们就把<code>i</code>干掉。<code>foreach</code>的语义，可以简单的用无返回值的<code>map</code>替代(第三行这个东西是有值的，但我们没有用变量去接。它的值是<code>[None, None, None]</code>)。注意<code>map</code>后要自己迭代一下，例如转成<code>list</code>。否则它只是一个<code>map object</code>，<code>l</code>也不会被<code>append</code>任何对象。</p><p>去掉<code>for</code>迭代变量<code>i</code>的干扰后(虽然又有了一个 map func 参数<code>x</code>)，我们得到了所期望的结果。问题得到了初步的解决。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 1.py</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>注：当然这里可以写成<code>l = list(map(lambda x: lambda: print(x), range(3)))</code>，不过我们需要首先排除<code>append</code>带来的影响。这里其实尝试过<code>l = [lambda: print(i) for i in range(3)]</code>，显然并没有用。在这个问题上，列表生成器和普通循环没有什么区别。</p><h2 id="更好的办法"><a href="#更好的办法" class="headerlink" title="更好的办法?"></a>更好的办法?</h2><p>问题当然得到了解决，不过我感觉应该没人会这么搞。至少看起来就很怪。</p><p>遂 Google 之。组合了几个关键词后，大概用了这样的关键词: python lambda late binding，得到了想看的东西: Late binding closures。翻译过来就是闭包延迟绑定。Python 的 lambda 其实就是只能写一行的闭包。</p><p>一个比较可以参考的文章<a href="http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures" target="_blank" rel="noopener external nofollow noreferrer">传送门</a>。总而言之，这是个 feature，不是个 bug。文章里也给出了更加 common 的解决方法，虽然依旧是比较 hack 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    l.append(<span class="keyword">lambda</span> i=i: print(i))</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>其实就是把<code>i</code>当默认的参数绑定进去，这样就不再是延迟的绑定，而是马上绑定进这个函数里。这样也行，改动比上面那种小。但是注释还是免不了的。</p><p>具体为什么会有这个 feature 呢？尝试写了一段 C++ 代码，也许有一些道理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;function&lt;<span class="keyword">void</span>(<span class="keyword">void</span>)&gt;&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    v.push_back([&amp;i]()&#123;<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;&#125;);</span><br><span class="line">v[<span class="number">0</span>]();</span><br></pre></td></tr></table></figure><p>这段代码输出结果是3，当然这是 C++ 的 for 循环导致的<code>i=3</code>。可以看到 capture list 中我写的是<code>&amp;i</code>，如果去掉引用其实就不会有这个问题。不过，对于没有这种概念的 Python，其实是没得选的。</p><h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> l = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  l.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i))</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node 1.js</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>不得不说，这个场景下，JavaScript 的闭包/lambda，写起来更香一点…</p><p>不过本身这个迭代加回调的场景，也确实是 JavaScript 应用更广泛一些。</p><p>既然经常在各种语言之间穿梭，那还是要对一些坑多了解点吧，不能总是搞出一些莫名其妙的问题 QAQ</p><p>之前听过一种说法，新学一门编程语言，主要学习语言特性和语法糖。现在看来，还需要加一项，就是语法坑。</p><p><del>以上。(?)</del></p><blockquote><p>UPD: 你把<code>let</code>换成<code>var</code>，还会这么想吗??</p><p>算了，就当没有这一节内容吧。<strong>我<em>一点</em>也没有<em>思考</em>过！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC Resolver 乱搞手册</title>
      <link href="/Resolve-a-Resolver/"/>
      <url>/Resolve-a-Resolver/</url>
      
        <content type="html"><![CDATA[<p><del>2020年了，为了 blog 不咕，还是要写点什么。</del></p><p>这是一个补档，记录了 2019 CUSTACM 校队选拔赛前为了校史上首次推出的滚榜活动做的准备。</p><p>不过说到为什么要做这个，其实都是一时兴起罢了。</p><p>该方案可以被广泛应用于各种 OJ 而不限于 DOMJudge 或 PC^2。我校的 CustOJ 就是基于 OnlineJudge 的。</p><h2 id="什么是-ICPC-Resolver"><a href="#什么是-ICPC-Resolver" class="headerlink" title="什么是 ICPC Resolver"></a>什么是 ICPC Resolver</h2><p>ICPC Resolver 是 ICPC Tools 中的一员，最初都是用于 ICPC World Finals 的。</p><p>如同它<a href="https://icpc.baylor.edu/icpctools/resolver/Resolver.pdf" target="_blank" rel="noopener external nofollow noreferrer">一万年不更新的文档</a>所说:</p><blockquote><p>The ICPC Resolver is a tool for graphical animation of contest results. It shows the final runs submitted</p><p>during a contest in an interesting way, and leads up to display of the award winners.</p></blockquote><p>ICPC Resolver 可以在比赛结束后，用于展示封榜时期内的比赛结果变化，也就是俗称的滚榜。</p><p>长期以来，在 *cpc 现场赛，滚榜都是一项传统艺能。不过也有的赛区因为各种原因不滚榜/滚不了榜，<del>令人发指(指省赛)</del>。</p><p>如果身为选手，观看滚榜是非常激动人心的，<strong>尤其是在铜铁/银铜/金银交界的区域，看到自己队名的时候</strong>。当然，作为万年铜首(<em>Cu</em>st)，我已经麻木了。<del>所以才有勇气直视 Resolver(雾)</del></p><h2 id="如何部署-ICPC-Resolver"><a href="#如何部署-ICPC-Resolver" class="headerlink" title="如何部署 ICPC Resolver"></a>如何部署 ICPC Resolver</h2><p>进入<a href="https://icpc.baylor.edu/icpctools/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>，点击<a href="https://icpc.baylor.edu/icpctools/resolver/resolver-2.0.1798.zip" target="_blank" rel="noopener external nofollow noreferrer">链接</a>，一键下载，解压运行，完成</p><blockquote><p>No~ No~ No~</p></blockquote><p>下载解压后你会发现，他连个能跑的 demo 都不给，这怎么整？</p><p>至于文档，乍一看运行方法倒是有很多，什么 Event Feed 啦，CDP/CDS 之类的，仔细阅读就会陷入递归读文档的深渊中。更过分的是，向前挖了几个<a href="https://pc2.ecs.csus.edu/pc2projects/build/allbuilds.php" target="_blank" rel="noopener external nofollow noreferrer">版本</a>，文档居然长得都几乎一毛一样。至少从文档上，并看不出历代 Resolver 的具体数据要求的区别。</p><p>而真实的 Resovler 文档，大概散落在 PC^2 文档里的某个角落。当然，PC^2 给的文档，只介绍了怎么把 PC^2 的数据喂给 Resolver。DOMJudge 大概也同理。</p><p>于是求助搜索引擎。根据我们的实际需求，排除了 CDP 的运行方式，最后参考了这篇博文里提供的数据。此处要感谢东北大学。</p><blockquote><p>题外话: 这个数据来自16沈阳站热身，记录了我的第一口大锅: 帮学长把一个最短路 sb 题读成了一个不可做题</p></blockquote><h2 id="如何正确运行-ICPC-Resolver"><a href="#如何正确运行-ICPC-Resolver" class="headerlink" title="如何正确运行 ICPC Resolver"></a>如何正确运行 ICPC Resolver</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>虽然有了数据，一开始也是跑不起来。根据 Exception 和凌乱的文档瞎猜了一些改法(比如把 run 改成 submission，跑是能跑起来了，不过跑起来是一个完全没有数据，只有队名的情况。中间略去许多的坑，得到的结论是: 使用了过高版本的 Resolver (干!)</p><p>枚举了数个过往的 dev 版本，最后确定了使用 1.1.0dev.1057。这个版本可以正确兼容目前手里的数据。</p><p>之后做的事情，其实是对网上下载来的数据做一个瘦身。不负责任的猜测，那份数据是 PC^2 自动生成的。再略去来回反复枚举参数的操作，最后得到了如下的结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">info</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>A Contest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">length</span>&gt;</span>05:00:00<span class="tag">&lt;/<span class="name">length</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scoreboard-freeze-length</span>&gt;</span>01:00:00<span class="tag">&lt;/<span class="name">scoreboard-freeze-length</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>20<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">info</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>121<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>队伍名称1<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>122<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>没有队<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>123<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>比速度<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>124<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>有情绪<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>125<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">university</span>&gt;</span>好选拔<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>110.523<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">first-to-solve</span>&gt;</span>true<span class="tag">&lt;/<span class="name">first-to-solve</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>122<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>152.958<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>123<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>153.628<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>false<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>124<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>14556.691<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>false<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>125<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>4157.132<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">problem</span>&gt;</span>1<span class="tag">&lt;/<span class="name">problem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>1<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">time</span>&gt;</span>1180.523<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">judged</span>&gt;</span>true<span class="tag">&lt;/<span class="name">judged</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">solved</span>&gt;</span>true<span class="tag">&lt;/<span class="name">solved</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">penalty</span>&gt;</span>true<span class="tag">&lt;/<span class="name">penalty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>winner<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Champion<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>122<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Not Gold Medalist<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>123<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>铁牌<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>125<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Silver Medalist - 银奖<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>124<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>medal<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>Bronze Medalist<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">award</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">team</span>&gt;</span>121<span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>first_to_solve<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">citation</span>&gt;</span>A题一血<span class="tag">&lt;/<span class="name">citation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">award</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先是比赛的信息，标题、总时长、封榜时间、罚时信息是必要的。</p><p>之后是题目，每个题目给个<code>id</code>就行。</p><p>再之后是队伍信息，每个队伍有个<code>id</code>，而队伍名称用<code>university</code>代替，可能是因为那个版本的 Resolver 只滚学校名称(毕竟 World Finals)。</p><p>用<code>run</code>代表提交信息(这部分新版本已经完全不一样了)，每次提交有个<code>id</code>(使用整数类型，而不是 hash string)。<code>problem</code>和<code>team</code>代表该次提交哪支队伍了哪题，里面填的是对应的<code>id</code>，很好理解。<code>time</code>是从 0 开始以秒为单位的时间戳。<code>judged=true</code>是必要的，否则会抛异常。<code>solved</code>和<code>penalty</code>是两个属性，合在一起可以代表提交的结果。只有 Accepted 中的<code>solved=true</code>且<code>penalty=false</code>，其他都是提交不通过，<code>solved=false</code>。其中 Compilation Error 不计罚时，所以<code>penalty=false</code>，否则<code>penalty=true</code>。最后可能有<code>first-to-solve=true</code>的属性，代表该次提交是该题的一血提交。但是<strong>不需要</strong><code>first-to-solve=false</code>，切记。</p><p><code>award</code>代表奖项，这里需要人工颁下奖。<code>team</code>代表获奖队伍的<code>id</code>，<code>type</code>有<code>winner</code>、<code>medal</code>、<code>first_to_solve</code>三种，<code>citation</code>是获奖的详细介绍。一支队伍允许获三个<code>type</code>不同的奖。</p><h3 id="中文字体"><a href="#中文字体" class="headerlink" title="中文字体"></a>中文字体</h3><p>老外开发的软件，对中文支持不是很好(等于没有)。Resolver 默认使用的是 Helvetica，一个古老而经典的拉丁字母无衬线字体。</p><p>根据搜索引擎，据说支持通过设置环境变量<code>ICPC_FONT</code>来调整使用的字体，但实测没有效果。估计是高版本 Resolver 的 feature。</p><p>不过，通过解压<code>resolver.jar</code>包发现，字体是打包在里面的。只要将里面的字体替换成有中文的，就有办法支持中文。没有编码问题真是太感动了</p><p>原本的字体文件名叫<code>HELV.PFB</code>。<code>pfb</code>是一个古老的字体格式。将我们已有的字体(基本上都是<code>ttf</code>格式)通过<a href="https://convertio.co/zh/ttf-pfb/" target="_blank" rel="noopener external nofollow noreferrer">在线工具</a>转成<code>pfb</code>，并命名成<code>HELV.PFB</code>放在<code>font</code>文件夹下，之后通过以下命令即可将我们想要的字体注入进 jar 包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -uvf resolver.jar font</span><br></pre></td></tr></table></figure><p>略过一番折腾和反复重试(不是所有中文字体都很好地适配 Resolver，非常容易出现文字重叠/截断或其他奇奇怪怪的事情)，使用了自己的 Mac 里不知道哪里掏出来的<code>STHEITI.ttf</code>。这个字体看起来效果还 OK。</p><p>不过还是有问题。有一些特殊的字符，显示效果不好，比如提交信息中间的-(两边貌似有空格)。于是尝试组合字体。</p><p>随手找了一个合并字体文件的<a href="https://en.m.fontke.com/tool/mergefonts/" target="_blank" rel="noopener external nofollow noreferrer">在线工具</a>，将原本的<code>HELV.PFB</code>里的字体(需要先转成<code>ttf</code>)和<code>STHEITI.ttf</code>合并。</p><p>由于 Helvetica 有点古老，为了显示效果，使用 Right Join，即以<code>STHEITI.ttf</code>为主，没有的字符从<code>HELV.PFB</code>获取，得到的<code>mixed.ttf</code>转成<code>pfb</code>注入<code>resolver.jar</code></p><p>经过这样一番折腾，终于得到了可用的 Resolver。这里提供已经折腾完的版本 - <a href="https://github.com/custoj/Cust-Resolver" target="_blank" rel="noopener external nofollow noreferrer">Github</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>首先我们假设文档说的是真的。所以通过命令启动 Resolver。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./resolver.sh sample.xml</span><br></pre></td></tr></table></figure><p>我只验证了 fast 参数，是好用的，例如这样加速 10 倍滚榜</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./resolver.sh sample.xml --fast 0.1</span><br></pre></td></tr></table></figure><p>其他参数可能也是真的。以上命令适用于 Linux/MacOS，Windows 使用<code>resolver.bat</code>同理，毕竟是跨平台的 Java 项目。</p><p>另外，滚榜中的一些键盘操作，也可能是真的。反正按空格<strong>真的</strong>可以让它一直滚。</p><h2 id="如何在-CustOJ-上实装"><a href="#如何在-CustOJ-上实装" class="headerlink" title="如何在 CustOJ 上实装"></a>如何在 CustOJ 上实装</h2><p>其实有了 Resolver 所需的数据格式，剩下的只是大模拟而已。把 OJ 的题目和提交记录，通过字符串处理成所需的格式，然后再手动填一下谁获了奖，滚榜就算 ready 了。</p><blockquote><p>No~ No~ No~</p></blockquote><p>不知道怎么就从大模拟变成了一坨 SQL (大草</p><p>大概是有点懒得加接口专门搞这玩意，并且也不想写个爬虫(自己爬自己是怎么回事)再把数据 format 起来，所以最简单粗暴的方法当然是<del>~</del>操库！</p><p>有一说一，PostgreSQL 还是挺好操的。首先它原生支持查询结果以<code>xml</code>格式返回，这就方便了许多。对应的<a href="https://www.postgresql.org/docs/9.1/functions-xml.html" target="_blank" rel="noopener external nofollow noreferrer">命令</a>是<code>xmlforest</code>。其他 RDBMS 也同理，感觉基本都有。</p><p>之后就是写查询了。偶尔把逻辑写在 SQL，感觉也不错，反正上面也没有其他语言对接，直接就出结果了。</p><p>这里需要两条查询，一条查询所有的参赛队伍，还有一条查询所有的提交。当然比较流氓的写法就是两条查询<code>UNION ALL</code>起来，那搞一次就行了。</p><p>整句SQL写了不到20行，可以接受。为避免透露<del>人尽皆知的</del> CustOJ 表结构，这里就不放了。不过 Github Repo 里有这段 SQL。</p><p>查询的逻辑，按实际需求做就行，要注意的点大概有这几条</p><ul><li>筛选有提交的参赛队伍，以防滚榜从一堆鸽子开始</li><li>提交记录过滤掉验题的(如果有的话)</li><li>查一血的时候，不如多 join 一次，而不是嵌套查询</li></ul><p>对于 PostgreSQL 来说，查询结果保存在文件挺方便的，利用<code>\o</code>指令即可。</p><p>如果 DB 端口不对外开的话，这些查询可以在服务器上做，之后<code>scp</code>下来(什么? 没有<code>scp</code>?? OJ 平时都靠人肉运维吗???)</p><p>之后把结果贴进要 resolve 的<code>xml</code>文件就行。注意上面说的，<strong>不需要<code>first-to-solve=false</code></strong>。如果查询里避免不掉，可以批量替换成空串。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>虽然是后记，也是后得很后的后记了。</p><p>由于比赛举办时不在学校，所以滚榜由学弟代为操作了。我<del>远程操作了比赛结果</del>整理了滚榜数据。</p><p>感觉效果还行，让许多本校的、NENU/CCUT 没参加过现场赛的同学体会了滚榜这项 *cpc 传统艺能。据说整场比赛的办赛效果惊动了隔壁 NENU，引来无数大佬砸钱赞助他们的 ACM(?)。</p><p>另外，这套单独的滚榜方案显然没有 JLU - yanger 的全套 DOMJudge + ICPC Tools 来得完善。今年我校要办赛，首先是希望有滚榜吧，其次不要像去年 EC Final 一样因为技术原因把滚榜锅了。像这样的一套备用方案，也算有个底。</p><p>对了，首先的首先的首先，希望今年省赛有 Ubuntu!</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>造数据防锅指北</title>
      <link href="/how-to-generate-test-datas/"/>
      <url>/how-to-generate-test-datas/</url>
      
        <content type="html"><![CDATA[<p><del>什么？你还在用 C++ 出数据</del></p><p>在<del>ACM</del> <del>JB</del> *CPC 系列的比赛中，出题是非常关键的一环。作为出题人，题出得不好，就会被喷(?)。出题除了需要脑洞，还需要严谨的数据。如果数据错了/水了，后果就是出题人被选手吊起来打。</p><p>本人从大二上学期的新生选拔赛开始给学校的各类校赛(?)出题，也在现场/赛后踩了一些坑。因此总结一些出题(主要是造数据)的姿势，以供参考。</p><h2 id="早期的实践-错误示范"><a href="#早期的实践-错误示范" class="headerlink" title="早期的实践 - 错误示范"></a>早期的实践 - 错误示范</h2><p>一开始当然是 C++ 选手的沙雕操作: <code>rand</code>, <code>freopen</code>，然后再手动加几个很小很边界的人肉数据点 hack 一些能想到的沙雕写法。</p><p>这么搞很显然有弊端。首先是没法保证人肉数据点的正确性，就算是正确的，可能还是不够强。其次是麻烦，跑一把只能出一组数据，然后还要改<code>freopen</code>里的文件名。<del>于是导致了数据只有一组</del></p><p>此外，当时还是个 Windows 用户。众所周知，<code>rand</code>生成的随机数最大值<code>RAND_MAX</code>是 library-dependent 的，在 Windows(MinGW) 下是 32767，因此跑不出比较大的随机数。</p><p>那个时候虽然知道这个 feature，但是解决方法比较沙雕: <code>rand()*rand()</code>。这显然变成了一个分布不均匀的随机，例如 19260817 出现的概率为 0。其实更好的解决方法是<code>(rand()&lt;&lt;16)+rand()</code>，不过总的来说使用 C++ 出数据是不推荐的做法。</p><p>当然，有一个场景必须要这么做——省赛(及其他现场赛 Windows 环境或没有 Python 的情况下)需要对拍的时候。这个时候，建议使用<code>mt19937</code>，还是比较方便的，起码不用考虑<code>rand</code>大小的问题。这也说明，出数据不一定是为了出题，可能还是为了过题。</p><p>题外话，从主办方的角度来说，现场赛使用 Windows 环境可能是为了萌新友好，不过个人还是希望明年我们办省赛的时候给选手们提供 Ubuntu 的标准现场赛环境(来自 Vim &amp; Python 重度依赖患者的 flag?)</p><h2 id="比较标准的姿势-大概"><a href="#比较标准的姿势-大概" class="headerlink" title="比较标准的姿势(大概)"></a>比较标准的姿势(大概)</h2><p>发现 C++ 不好用的时候，接下来基本上就会想到 Python。随机数据<code>import random</code>一把梭，并且还有方便的列表操作 api。接下来以今年校内 C4 选拔赛原题<a href="http://oj.cust.edu.cn/problem/141" target="_blank" rel="noopener external nofollow noreferrer">tr</a>为例，说明一个大致的出题流程。</p><p>首先是准备数据生成器，我这边一般命名为<code>gen.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">s=<span class="string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890/. "</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(random.randint(<span class="number">1</span>,<span class="number">100</span>)):</span><br><span class="line">  print(<span class="string">''</span>.join([random.choice(s)<span class="keyword">for</span> j <span class="keyword">in</span> range(random.randint(<span class="number">1</span>,<span class="number">100</span>))]))</span><br></pre></td></tr></table></figure><p>然后是用来读输入跑输出的程序，一般是标程，不过这题其实出得挺偷懒的，标程<code>work.sh</code>如下。<del>显然这题的标题就是这么来的</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">tr A-Z a-z</span><br></pre></td></tr></table></figure><p>之后拿脚本<code>gen.sh</code>批量产出输入输出数据，比如搞个五组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=5;i++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">python3 gen.py &gt; <span class="variable">$i</span>.<span class="keyword">in</span></span><br><span class="line">./work.sh &lt;<span class="variable">$i</span>.<span class="keyword">in</span> &gt;<span class="variable">$i</span>.out</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>至此，我们当前目录下会有三个文件: <code>gen.py</code>, <code>work.sh</code>, <code>gen.sh</code>。当然这个<code>work.sh</code>纯属偷懒产物，一般的话还是好好拿 C++ 什么的写标程，然后编译得到可执行文件，比如<code>g++ work.cpp -o work</code>，然后上述<code>gen.sh</code>内的<code>work.sh</code>也相应改成可执行文件<code>work</code>。<strong>注意，这里的标程和数据生成器都不需要文件输入输出，直接走标准输入输出就好了。</strong></p><p>基本的三件套到位，就可以在终端跑了。这里首先要加一波执行的权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x work.sh  <span class="comment"># 偷懒产物，可忽略</span></span><br><span class="line">$ chmod +x gen.sh</span><br></pre></td></tr></table></figure><p>然后执行脚本，大功告成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gen.sh</span><br></pre></td></tr></table></figure><p>对于像校内 C4 选拔赛这样的需要 OI 赛制的，也可以微调一下<code>gen.py</code>，比如这题把空格去掉再跑一把形成另一批输入数据，酌情放点部分分给选手。此处就不再赘述了。</p><h2 id="后来的偷懒方法"><a href="#后来的偷懒方法" class="headerlink" title="后来的偷懒方法"></a>后来的偷懒方法</h2><p>之后的好几场比赛，都是组的比较急，有的时候是比赛还有一周开始，但是我们还是一个题都没出的状态。所以就有了一种又快又不容易出锅的偷懒方法——利用好 Special Judge</p><p>目前，我校的 oj，如果题目是 spj 的，数据只需要提供<code>.in</code>文件，之后额外提供 spj 代码即可。显然，输出数据有没有出锅，肉眼还是比较难看出来的，但是 spj 代码就比较容易 review。出数据的流程和之前几乎没什么区别，去掉<code>work</code>的部分就可以了。这就意味着，标程有的时候就不需要写了(?)，例如<a href="http://oj.cust.edu.cn/problem/100" target="_blank" rel="noopener external nofollow noreferrer">玄学</a>、<a href="http://oj.cust.edu.cn/problem/125" target="_blank" rel="noopener external nofollow noreferrer">BA</a>、<a href="http://oj.cust.edu.cn/problem/161" target="_blank" rel="noopener external nofollow noreferrer">Arithmetic Sequence</a>，就都是这么来的。</p><p>出题人自验的过程，也就是看一下 spj 代码有没有肉眼可见的 bug，不需要担心输出数据和输入数据是不是对不上了。<del>之后丢给人验题，能过就行了</del></p><p>至于什么是肉眼可见的 bug，只能靠经验自由发挥了。以下举两个例子</p><p>之前现场出过的一个锅是，题目给 n、m 和长度为 m 的一个数组 a，spj 大概要判一个长度为 x(选手给出)的数组 b 是否满足$∑b_{a_i}$可以被 n 整除。当时有选手提交的代码就是只输出了一个 0，结果 spj 返回 Accepted。原因是 spj 虽然判了 x 是否比 m 大，但是没判 x 是否$\le 0$。至于现场修锅，比较曲折，大概是线上改库把人家的 Accepted 退回，题数<code>--</code>，手算一下去掉这题的罚时，然后再去通知人家。</p><p>还有一个锅，是在比赛结束后发现的，因为没有选手成功触发。这个问题首先其实和出题流程没有什么太大关系，是题目需要输出小数，根据精度判断是否正确。然后发现如果输出是<code>NaN</code>，spj 返回 Accepted。这种问题其实就比较状况外了，然后查之前的题有没有相同的问题，也是有些题有有些题没有。不过还是建议以后这种情况先用<code>std::isnan</code>判一下</p><p>总之，这种偷懒的方法还需要比较完善的 review 流程<del>需要用ctf选手的目光去审计spj代码</del>，可以在熟悉的情况下适当使用，正常情况下还是用上一部分所述的方法造数据。</p><h2 id="附录1-如何把custoj上的题搬运到牛客"><a href="#附录1-如何把custoj上的题搬运到牛客" class="headerlink" title="附录1 如何把custoj上的题搬运到牛客"></a>附录1 如何把custoj上的题搬运到牛客</h2><p>貌似上次留了这个flag，补档。挂题要用的牛客号在我这，有需要可以联系我，或者直接找牛客重置。</p><p>搬运题面的时候，可能会涉及到 latex 公式。因为我们出题一般都是 markdown 格式内嵌 latex，所以就直接点插入公式，粘贴全部的 markdown，再微调格式即可。</p><p>数据分为两种。没有 spj 的，直接搬过去就行了。有 spj 的，首先要新建<strong>对应数量的<code>.out</code>文件</strong>，内容随意，spj 不用到就行。之后修改 spj 代码，按牛客的要求将文件名写死。一般的具体做法是把 spj 代码中 main 里以下代码块(一般从18行起)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc != <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: spj x.in x.out\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">input = fopen(args[<span class="number">1</span>], <span class="string">"r"</span>);</span><br><span class="line">user_output = fopen(args[<span class="number">2</span>], <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input = fopen(<span class="string">"input"</span>, <span class="string">"r"</span>);</span><br><span class="line">user_output = fopen(<span class="string">"user_output"</span>, <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p>这样就能很方便地把 custoj 里的题目搬运到牛客上了。办个重现赛什么的还是很方便的</p><h2 id="附录2"><a href="#附录2" class="headerlink" title="附录2"></a>附录2</h2><p><del>贵校什么时候考虑接入polygon啊</del></p><p><del>贵校什么时候校赛考虑用DomJudge啊</del></p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近一季度</title>
      <link href="/2019-4-6/"/>
      <url>/2019-4-6/</url>
      
        <content type="html"><![CDATA[<p><strong>本篇文章的部分内容被一些不怀好意的人员曲解、利用，暂不显示。</strong>祝他们不会因为「不会 xx」而被「换一个 npy」。</p><p>至于原文？那总是存在于互联网中的某处的。</p><p><em>Thank you ALL</em></p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces - April Fools Day Contest 2019</title>
      <link href="/Codeforces-April-Fools-Day-Contest-2019/"/>
      <url>/Codeforces-April-Fools-Day-Contest-2019/</url>
      
        <content type="html"><![CDATA[<p>一年只有两场 cf，一场 Goodbye，一场 April Fools Day Contest。</p><p>年年 B 题都有毒，去年摸猫，今年暴力窃取输入数据。</p><p>青名大佬<code>kit1980</code>今年又回来出愚人节了，感觉题目质量还是比去年高的。虽然他出的题好像没什么人做出来。</p><h2 id="A-Thanos-Sort"><a href="#A-Thanos-Sort" class="headerlink" title="A. Thanos Sort"></a>A. Thanos Sort</h2><p>Upsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/A" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>签到题。灭霸排序，每次将数组的前一半或后一半移除，直到数组有序为止。问可能的灭霸排序后数组的最长长度。</p><p>这题一点也不 April Fool，比赛时直接跳了。怎么做都能过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sor</span><span class="params">(x)</span>:</span></span><br><span class="line">  t=x[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">if</span> t&gt;i:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    t=i</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">input()</span><br><span class="line">x=list(map(int,input().split()))</span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  l=<span class="number">1</span>&lt;&lt;i</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(x)-l+<span class="number">1</span>,l):</span><br><span class="line">    <span class="keyword">if</span> sor(x[j:j+l]):</span><br><span class="line">      ans=max(ans,l)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><h2 id="B-Kanban-Numbers"><a href="#B-Kanban-Numbers" class="headerlink" title="B. Kanban Numbers"></a>B. Kanban Numbers</h2><p>Solved. 01:14 (+104)</p><p><a href="https://codeforces.com/contest/1145/problem/B" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>为什么交了这么多发？</p><blockquote><p>大概是二分了每一个输入的输出</p></blockquote><p>比赛时候不知道啥是“看板”(Kanban)，头铁怼这个题，过了以后已经头昏眼花了。过的时候依然不知道什么是“看板”。</p><p>正解: Kan <strong>Ban</strong> Numbers, 即英语拼写时不出现 k、a、n 字母的数。</p><p>？？？我是怎么过的这题</p><p>数据除了样例全是升序，大概是吃了这个好处吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">  <span class="keyword">if</span> (x==<span class="number">5</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">13</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">24</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">46</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">4</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">10</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">11</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">12</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">16</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">20</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">28</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">30</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">35</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">37</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">41</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">43</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">49</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">70</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">75</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">90</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;=<span class="number">99</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">99</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Mystery-Circuit"><a href="#C-Mystery-Circuit" class="headerlink" title="C. Mystery Circuit"></a>C. Mystery Circuit</h2><p>Upsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/C" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>出题人 Nickolas 同时是 Microsoft Q# Coding Contest 的出题人。看到这个电路图，想到量子门。</p><p>查了 wiki，从左到右分别是<code>NOT</code>门、<code>Controlled NOT</code>门、<code>Toffoli</code>门。第四个不知道是什么，猜了一下应该和前两个类似，若下面三条线路都是<code>1</code>，第四条线路取反，否则不变。</p><p>比赛时手玩样例失败了，感觉前年也是少一道电路题？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">  <span class="keyword">int</span> a=x&amp;<span class="number">8</span>,b=x&amp;<span class="number">4</span>,c=x&amp;<span class="number">2</span>,d=x&amp;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> A=a^<span class="number">8</span>,B=(A&gt;&gt;<span class="number">1</span>)^b,C=((A&gt;&gt;<span class="number">2</span>)&amp;(B&gt;&gt;<span class="number">1</span>))^c,D=((A&gt;&gt;<span class="number">3</span>)&amp;(B&gt;&gt;<span class="number">2</span>)&amp;(C&gt;&gt;<span class="number">1</span>))^d;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;A+B+C+D&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Pigeon-d’Or"><a href="#D-Pigeon-d’Or" class="headerlink" title="D. Pigeon d’Or"></a>D. Pigeon d’Or</h2><p>Solved. 01:54 (+2)</p><p><a href="https://codeforces.com/contest/1145/problem/D" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><p>题面很多拼写错误。英语水平不好，贴到 Word 里看看哪些单词错了啥。</p><p>发现错的字母连起来是有含义的: f<strong>t</strong>ying, sani<strong>w</strong>ation, tr<strong>o</strong>nsform -&gt; two</p><p>连起来以后的结果是: two plus xor of third and min elements</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input()</span><br><span class="line">a=list(map(int,input().split()))</span><br><span class="line">print(<span class="number">2</span>+(a[<span class="number">2</span>]^min(a)))</span><br></pre></td></tr></table></figure><h2 id="E-Fourier-Doodles"><a href="#E-Fourier-Doodles" class="headerlink" title="E. Fourier Doodles"></a>E. Fourier Doodles</h2><p>Unsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/E" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><h2 id="F-Neat-Words"><a href="#F-Neat-Words" class="headerlink" title="F. Neat Words"></a>F. Neat Words</h2><p>Solved. 01:43 (+)</p><p><a href="https://codeforces.com/contest/1145/problem/F" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p><blockquote><p><strong>neat</strong> (<em>adj.</em>): ②(well presented) 工整的 gōngzhěng de ‹handwriting, stitching› (来自英汉词典)</p></blockquote><p>观察样例，<code>NEAT</code>、<code>AI</code>、<code>JUROR</code>，写出来要不全都是直线，要不每个字母都带曲线。</p><p>于是得到题意: 求一个单词的每个字母是否全都是直的/全都带曲线的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n=input()</span><br><span class="line">s=<span class="string">'AEFHIKLMNTVWXYZ'</span></span><br><span class="line">t=<span class="string">'BCDGJOPQRSU'</span></span><br><span class="line">f1=<span class="number">0</span></span><br><span class="line">f2=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> n:f1=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> n:f2=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> f1+f2==<span class="number">1</span>:print(<span class="string">'YES'</span>)</span><br><span class="line"><span class="keyword">else</span>:print(<span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure><p>G. AI Takeover<br>Unsolved.</p><p><a href="https://codeforces.com/contest/1145/problem/G" target="_blank" rel="noopener external nofollow noreferrer">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> April Fools Day </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>*cpc现场赛vim配置</title>
      <link href="/cpc-vimrc/"/>
      <url>/cpc-vimrc/</url>
      
        <content type="html"><![CDATA[<p>现场赛 vim 配置，仅 <strong>12</strong> 行，配置只需 <strong>1</strong> 分钟！</p><p>普通 vim 玩家也能应付平时使用</p><h2 id="为什么用-vim"><a href="#为什么用-vim" class="headerlink" title="为什么用 vim?"></a>为什么用 vim?</h2><p>我用 vim，基于以下几个原因</p><ul><li>axp 学长推荐 (axpnb!)</li><li>现场赛使用的系统基本都是<code>Ubuntu</code>，基本都提供了<code>vim</code></li><li>遇到过很多现场赛有人反映/队友亲测 CodeBlocks 崩溃/卡顿，vim 稳定性杰出</li><li>提高<code>Linux</code>姿势，遇到只有系统自带记事本的环境也不虚 (x</li><li>快速编辑，例如我常用的<code>*dd</code>/<code>*yy</code>和<code>p</code>组合技</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>首先用<code>vim</code>创建并编辑<code>.vimrc</code>文件 (完整路径<code>~/.vimrc</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><p><code>.vimrc</code>本体</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>                                      <span class="comment">" 高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span>                                         <span class="comment">" 行号</span></span><br><span class="line"><span class="keyword">set</span> smarttab                                   <span class="comment">" tab长度适配</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                                  <span class="comment">" tab长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>                               <span class="comment">" 自动补齐的tab长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span>                                    <span class="comment">" 缩进</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span>                                    <span class="comment">" 鼠标定位</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F9&gt;</span> :<span class="keyword">call</span> CR()<span class="symbol">&lt;CR&gt;</span>                        <span class="comment">" 一键编译运行</span></span><br><span class="line">func! CR()                                     <span class="comment">" 编译运行函数</span></span><br><span class="line">    exec <span class="string">"w"</span>                                   <span class="comment">" 保存文件</span></span><br><span class="line">    exec <span class="string">"!g++ -O2 -std=c++11 % -o %&lt; &amp;&amp; ./%&lt;"</span> <span class="comment">" g++编译命令，开O2优化和c++11</span></span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure><h2 id="一些啰嗦"><a href="#一些啰嗦" class="headerlink" title="一些啰嗦"></a>一些啰嗦</h2><p>七行配置，五行编译。</p><p>显示相关两行，tab 相关三行，顺便缩进。</p><p>不要鼠标定位也可以，熟练使用<code>hjkl</code>移动。</p><p>写快捷键映射的时候，不知道哪里打空格，就每隔一个词打一个。</p><p><code>%</code>是当前文件名，<code>%&lt;</code>是去后缀的当前文件名。熟练使用<code>g++</code>，想要怎么编译倒回去代入即可。然后<code>&amp;&amp; ./%&lt;</code>执行编译输出的可执行文件。</p><h2 id="扩展-一键复制"><a href="#扩展-一键复制" class="headerlink" title="扩展: 一键复制"></a>扩展: 一键复制</h2><p>有些比赛需要复制代码到网页提交。以下介绍如何复制全部代码。</p><p>在 vim 里操作，<strong>一般模式</strong>(按 esc 以后)键入<code>gg</code>(区分大小写)，跳转到第一行。</p><p>键入<code>V</code>进入可视模式 (按行选中)</p><p>键入<code>G</code>跳转到最后一行</p><p>键入<code>&quot;+y</code>将选中内容复制到剪贴板</p><p>写成一句话加在<code>.vimrc</code>后面，就是</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-A&gt;</span> : ggVG<span class="comment">"+y</span></span><br></pre></td></tr></table></figure><h2 id="扩展-Python"><a href="#扩展-Python" class="headerlink" title="扩展: Python"></a>扩展: Python</h2><p>利用<code>&amp;filetype</code>判断文件类型，使用不同的指令</p><p>一般比赛想用<code>python3.x</code>的话，3 是需要写的。手抖忘写，python 报错，队友两行泪。</p><p><code>.vimrc</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> smarttab</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F9&gt;</span> :<span class="keyword">call</span> CR()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line">func! CR()</span><br><span class="line">    exec <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">if</span> &amp;<span class="keyword">filetype</span>==<span class="string">'cpp'</span></span><br><span class="line">        exec <span class="string">"!g++ -O2 -std=c++11 % -o %&lt; &amp;&amp; ./%&lt;"</span></span><br><span class="line">    <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span>==<span class="string">'python'</span></span><br><span class="line">        exec <span class="string">"!python3 %"</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure><h2 id="6-12-2019补充"><a href="#6-12-2019补充" class="headerlink" title="6/12/2019补充"></a>6/12/2019补充</h2><p>前几天上班配<code>.ideavimrc</code>时候发现的配置，和 WorldFinal 直播时看到的效果如出一辙，特此记录：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> relativenumber</span><br></pre></td></tr></table></figure><p>用于显示相对行号，方便<code>j</code>、<code>yy</code>、<code>dd</code>等操作</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kickstart 2019 A - Parcels</title>
      <link href="/kickstart-2019-A-Parcels/"/>
      <url>/kickstart-2019-A-Parcels/</url>
      
        <content type="html"><![CDATA[<p>起晚了，第一轮 Kickstart 没打上，补一下第二题。</p><p>入土选手码力下降，TvT 咕鸽还是强啊</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e01/000000000006987d" target="_blank" rel="noopener external nofollow noreferrer">Parcels (Round A - Kick Start 2019)</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个$n×m$的<code>01</code>字符地图，<code>1</code>代表邮局，<code>0</code>代表空地。现在可以增加至多一个邮局，使得所有空白点到最近邮局曼哈顿距离最大值最小。求这个最小值<code>k</code>。</p><p>有$T$组输入，$T\le 100$，$n,m\le 250$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先特判答案$k=0$的情况，即地图中<code>1</code>的个数$\ge n×m−1$<br>将题意转化，求最小的<code>k</code>，每一个邮局覆盖距其<code>k</code>个曼哈顿距离以内的所有点，之后再加一个邮局可以使得地图被完全覆盖。</p><p>显然这个邮局是不加白不加的。考虑从<code>1</code>枚举最小值<code>k</code>，每枚举一次用 BFS 在地图上拓展每一个邮局的覆盖范围。此处的 BFS 初始时将所有邮局坐标入队，地图上的一个点不会二次入队。</p><p>然后判断剩余的未被覆盖的点是否可以找到一个点，到这个点的距离都$\le k$。如果找得到，那当前枚举到的<code>k</code>就是答案。</p><p>暴力地判断上述是否可以问题，需要枚举地图每个点和每个未覆盖点，复杂度$O(n^2m^2)$，但是未被覆盖的点有一大部分是不需要判断的。</p><p>想到只需选取离未被覆盖的点集中心最远的那部分点判断即可。此处的结论是，只需要判断未被覆盖的点集中横坐标和纵坐标<strong>和/差</strong>取到<strong>最大/最小值</strong>的点即可。最远的点数量是个常数，因此复杂度降为$O(nm)$。</p><p>最后复杂度$O(Tnm×玄学)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">255</span>][<span class="number">255</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T,kase=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">  <span class="keyword">for</span> (kase=<span class="number">1</span>;kase&lt;=T;kase++)&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        <span class="keyword">if</span> (a[i][j]==<span class="string">'1'</span>)q.push(&#123;i,j&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (q.size()&gt;=n*m<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;;k++)&#123;</span><br><span class="line">      <span class="keyword">int</span> len=q.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> ii=<span class="number">0</span>;ii&lt;len;ii++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> tx=t.first+d[i][<span class="number">0</span>],ty=t.second+d[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span> (tx&gt;=<span class="number">0</span>&amp;&amp;ty&gt;=<span class="number">0</span>&amp;&amp;tx&lt;n&amp;&amp;ty&lt;m&amp;&amp;a[tx][ty]!=<span class="string">'1'</span>)&#123;</span><br><span class="line">            a[tx][ty]=<span class="string">'1'</span>;</span><br><span class="line">            q.push(&#123;tx,ty&#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ax,ay;</span><br><span class="line">      <span class="keyword">int</span> maxp=<span class="number">-1e9</span>,maxm=<span class="number">-1e9</span>,minp=<span class="number">1e9</span>,minm=<span class="number">1e9</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">          <span class="keyword">if</span> (a[i][j]!=<span class="string">'1'</span>)&#123;</span><br><span class="line">            ax.push_back(i),ay.push_back(j);</span><br><span class="line">            maxp=max(maxp,i+j);</span><br><span class="line">            minp=min(minp,i+j);</span><br><span class="line">            maxm=max(maxm,i-j);</span><br><span class="line">            minm=min(minm,i-j);</span><br><span class="line">          &#125;</span><br><span class="line">      <span class="keyword">if</span> (ax.empty())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;mx,my;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ax.size();i++)</span><br><span class="line">        <span class="keyword">if</span> (ax[i]+ay[i]==maxp||ax[i]+ay[i]==minp||</span><br><span class="line">            ax[i]-ay[i]==maxm||ax[i]-ay[i]==minm)</span><br><span class="line">            mx.push_back(ax[i]),my.push_back(ay[i]);</span><br><span class="line">      <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> xi=<span class="number">0</span>;xi&lt;n;xi++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> yi=<span class="number">0</span>;yi&lt;m;yi++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> ff=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mx.size();j++)</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">abs</span>(xi-mx[j])+<span class="built_in">abs</span>(yi-my[j])&gt;k)&#123;</span><br><span class="line">            ff=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ff)&#123;</span><br><span class="line">          f=<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (f)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,kase,k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 码力 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CustOJ开发指北</title>
      <link href="/custoj-deploy/"/>
      <url>/custoj-deploy/</url>
      
        <content type="html"><![CDATA[<p><strong>最近对CustOJ的代码结构做了调整，并且在Github成立了Organization，把repo都搬到那个里面去了，因此本文暂时Deprecated，有空再补。</strong></p><p>UPD: 公网访问被切了，无限期鸽子中</p>]]></content>
      
      
      <categories>
          
          <category> oj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开坑纪念</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>新开博客，特此纪念【该来的总是要来的系列?</p><h2 id="为什么之前没有？"><a href="#为什么之前没有？" class="headerlink" title="为什么之前没有？"></a>为什么之前没有？</h2><p>真实: 语文水平太菜了，好像写不出什么</p><p>更真实: 由于菜，没有什么有含量的东西可以写</p><h2 id="后来呢"><a href="#后来呢" class="headerlink" title="后来呢?"></a>后来呢?</h2><p><del>老年人健忘日渐严重</del></p><p>即将失学，也许应该用什么东西装点一下平淡的简历</p><p>要去Bytedance Camp，好像有点东西可以写了？</p><p>那就趁寒假搞一个博客吧</p><h2 id="为什么咕了"><a href="#为什么咕了" class="headerlink" title="为什么咕了?"></a>为什么咕了?</h2><p>其实这个博客的坑寒假已经开好了，然而把整套算是配置好的博客丢在了家里的电脑，于是咕了</p><p>然后开学、做简历、投简历、面试……</p><p>为什么又不咕了?<br>拿到了实习offer以后日渐咸鱼</p><p>计划把一些我手上的锅提前丢给学弟们，需要找个地方写一些教程</p><h2 id="后来呢-1"><a href="#后来呢-1" class="headerlink" title="后来呢?"></a>后来呢?</h2><p>可能以后还是要咕的</p><p>To Be Continued.</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
